// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Test.pb.h"
// @@protoc_insertion_point(imports)

@implementation TestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface User ()
@property SInt32 uid;
@property SInt32 gender;
@property SInt32 verified;
@property SInt32 exp;
@property SInt32 level;
@property SInt32 authed;
@property SInt32 status;
@property (strong) NSString* nickname;
@property SInt32 guard;
@property SInt32 rider;
@property (strong) NSString* portrait;
@end

@implementation User

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasVerified {
  return !!hasVerified_;
}
- (void) setHasVerified:(BOOL) _value_ {
  hasVerified_ = !!_value_;
}
@synthesize verified;
- (BOOL) hasExp {
  return !!hasExp_;
}
- (void) setHasExp:(BOOL) _value_ {
  hasExp_ = !!_value_;
}
@synthesize exp;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasAuthed {
  return !!hasAuthed_;
}
- (void) setHasAuthed:(BOOL) _value_ {
  hasAuthed_ = !!_value_;
}
@synthesize authed;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasGuard {
  return !!hasGuard_;
}
- (void) setHasGuard:(BOOL) _value_ {
  hasGuard_ = !!_value_;
}
@synthesize guard;
- (BOOL) hasRider {
  return !!hasRider_;
}
- (void) setHasRider:(BOOL) _value_ {
  hasRider_ = !!_value_;
}
@synthesize rider;
- (BOOL) hasPortrait {
  return !!hasPortrait_;
}
- (void) setHasPortrait:(BOOL) _value_ {
  hasPortrait_ = !!_value_;
}
@synthesize portrait;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.gender = 0;
    self.verified = 0;
    self.exp = 0;
    self.level = 0;
    self.authed = 0;
    self.status = 0;
    self.nickname = @"";
    self.guard = 0;
    self.rider = 0;
    self.portrait = @"";
  }
  return self;
}
static User* defaultUserInstance = nil;
+ (void) initialize {
  if (self == [User class]) {
    defaultUserInstance = [[User alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserInstance;
}
- (instancetype) defaultInstance {
  return defaultUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeInt32:1 value:self.uid];
  }
  if (self.hasGender) {
    [output writeInt32:2 value:self.gender];
  }
  if (self.hasVerified) {
    [output writeInt32:3 value:self.verified];
  }
  if (self.hasExp) {
    [output writeInt32:4 value:self.exp];
  }
  if (self.hasLevel) {
    [output writeInt32:5 value:self.level];
  }
  if (self.hasAuthed) {
    [output writeInt32:6 value:self.authed];
  }
  if (self.hasStatus) {
    [output writeInt32:7 value:self.status];
  }
  if (self.hasNickname) {
    [output writeString:8 value:self.nickname];
  }
  if (self.hasGuard) {
    [output writeInt32:9 value:self.guard];
  }
  if (self.hasRider) {
    [output writeInt32:10 value:self.rider];
  }
  if (self.hasPortrait) {
    [output writeString:11 value:self.portrait];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeInt32Size(1, self.uid);
  }
  if (self.hasGender) {
    size_ += computeInt32Size(2, self.gender);
  }
  if (self.hasVerified) {
    size_ += computeInt32Size(3, self.verified);
  }
  if (self.hasExp) {
    size_ += computeInt32Size(4, self.exp);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(5, self.level);
  }
  if (self.hasAuthed) {
    size_ += computeInt32Size(6, self.authed);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(7, self.status);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(8, self.nickname);
  }
  if (self.hasGuard) {
    size_ += computeInt32Size(9, self.guard);
  }
  if (self.hasRider) {
    size_ += computeInt32Size(10, self.rider);
  }
  if (self.hasPortrait) {
    size_ += computeStringSize(11, self.portrait);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (User*) parseFromData:(NSData*) data {
  return (User*)[[[User builder] mergeFromData:data] build];
}
+ (User*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input {
  return (User*)[[[User builder] mergeFromInputStream:input] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (User*)[[[User builder] mergeFromCodedInputStream:input] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBuilder*) builder {
  return [[UserBuilder alloc] init];
}
+ (UserBuilder*) builderWithPrototype:(User*) prototype {
  return [[User builder] mergeFrom:prototype];
}
- (UserBuilder*) builder {
  return [User builder];
}
- (UserBuilder*) toBuilder {
  return [User builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasVerified) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verified", [NSNumber numberWithInteger:self.verified]];
  }
  if (self.hasExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"exp", [NSNumber numberWithInteger:self.exp]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasAuthed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authed", [NSNumber numberWithInteger:self.authed]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasGuard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guard", [NSNumber numberWithInteger:self.guard]];
  }
  if (self.hasRider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rider", [NSNumber numberWithInteger:self.rider]];
  }
  if (self.hasPortrait) {
    [output appendFormat:@"%@%@: %@\n", indent, @"portrait", self.portrait];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasVerified) {
    [dictionary setObject: [NSNumber numberWithInteger:self.verified] forKey: @"verified"];
  }
  if (self.hasExp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.exp] forKey: @"exp"];
  }
  if (self.hasLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.level] forKey: @"level"];
  }
  if (self.hasAuthed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.authed] forKey: @"authed"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasGuard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.guard] forKey: @"guard"];
  }
  if (self.hasRider) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rider] forKey: @"rider"];
  }
  if (self.hasPortrait) {
    [dictionary setObject: self.portrait forKey: @"portrait"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[User class]]) {
    return NO;
  }
  User *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasVerified == otherMessage.hasVerified &&
      (!self.hasVerified || self.verified == otherMessage.verified) &&
      self.hasExp == otherMessage.hasExp &&
      (!self.hasExp || self.exp == otherMessage.exp) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasAuthed == otherMessage.hasAuthed &&
      (!self.hasAuthed || self.authed == otherMessage.authed) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasGuard == otherMessage.hasGuard &&
      (!self.hasGuard || self.guard == otherMessage.guard) &&
      self.hasRider == otherMessage.hasRider &&
      (!self.hasRider || self.rider == otherMessage.rider) &&
      self.hasPortrait == otherMessage.hasPortrait &&
      (!self.hasPortrait || [self.portrait isEqual:otherMessage.portrait]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasVerified) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.verified] hash];
  }
  if (self.hasExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.exp] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasAuthed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.authed] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasGuard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guard] hash];
  }
  if (self.hasRider) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rider] hash];
  }
  if (self.hasPortrait) {
    hashCode = hashCode * 31 + [self.portrait hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserBuilder()
@property (strong) User* resultUser;
@end

@implementation UserBuilder
@synthesize resultUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUser = [[User alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUser;
}
- (UserBuilder*) clear {
  self.resultUser = [[User alloc] init];
  return self;
}
- (UserBuilder*) clone {
  return [User builderWithPrototype:resultUser];
}
- (User*) defaultInstance {
  return [User defaultInstance];
}
- (User*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (User*) buildPartial {
  User* returnMe = resultUser;
  self.resultUser = nil;
  return returnMe;
}
- (UserBuilder*) mergeFrom:(User*) other {
  if (other == [User defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasVerified) {
    [self setVerified:other.verified];
  }
  if (other.hasExp) {
    [self setExp:other.exp];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasAuthed) {
    [self setAuthed:other.authed];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasGuard) {
    [self setGuard:other.guard];
  }
  if (other.hasRider) {
    [self setRider:other.rider];
  }
  if (other.hasPortrait) {
    [self setPortrait:other.portrait];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readInt32]];
        break;
      }
      case 16: {
        [self setGender:[input readInt32]];
        break;
      }
      case 24: {
        [self setVerified:[input readInt32]];
        break;
      }
      case 32: {
        [self setExp:[input readInt32]];
        break;
      }
      case 40: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 48: {
        [self setAuthed:[input readInt32]];
        break;
      }
      case 56: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setNickname:[input readString]];
        break;
      }
      case 72: {
        [self setGuard:[input readInt32]];
        break;
      }
      case 80: {
        [self setRider:[input readInt32]];
        break;
      }
      case 90: {
        [self setPortrait:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultUser.hasUid;
}
- (SInt32) uid {
  return resultUser.uid;
}
- (UserBuilder*) setUid:(SInt32) value {
  resultUser.hasUid = YES;
  resultUser.uid = value;
  return self;
}
- (UserBuilder*) clearUid {
  resultUser.hasUid = NO;
  resultUser.uid = 0;
  return self;
}
- (BOOL) hasGender {
  return resultUser.hasGender;
}
- (SInt32) gender {
  return resultUser.gender;
}
- (UserBuilder*) setGender:(SInt32) value {
  resultUser.hasGender = YES;
  resultUser.gender = value;
  return self;
}
- (UserBuilder*) clearGender {
  resultUser.hasGender = NO;
  resultUser.gender = 0;
  return self;
}
- (BOOL) hasVerified {
  return resultUser.hasVerified;
}
- (SInt32) verified {
  return resultUser.verified;
}
- (UserBuilder*) setVerified:(SInt32) value {
  resultUser.hasVerified = YES;
  resultUser.verified = value;
  return self;
}
- (UserBuilder*) clearVerified {
  resultUser.hasVerified = NO;
  resultUser.verified = 0;
  return self;
}
- (BOOL) hasExp {
  return resultUser.hasExp;
}
- (SInt32) exp {
  return resultUser.exp;
}
- (UserBuilder*) setExp:(SInt32) value {
  resultUser.hasExp = YES;
  resultUser.exp = value;
  return self;
}
- (UserBuilder*) clearExp {
  resultUser.hasExp = NO;
  resultUser.exp = 0;
  return self;
}
- (BOOL) hasLevel {
  return resultUser.hasLevel;
}
- (SInt32) level {
  return resultUser.level;
}
- (UserBuilder*) setLevel:(SInt32) value {
  resultUser.hasLevel = YES;
  resultUser.level = value;
  return self;
}
- (UserBuilder*) clearLevel {
  resultUser.hasLevel = NO;
  resultUser.level = 0;
  return self;
}
- (BOOL) hasAuthed {
  return resultUser.hasAuthed;
}
- (SInt32) authed {
  return resultUser.authed;
}
- (UserBuilder*) setAuthed:(SInt32) value {
  resultUser.hasAuthed = YES;
  resultUser.authed = value;
  return self;
}
- (UserBuilder*) clearAuthed {
  resultUser.hasAuthed = NO;
  resultUser.authed = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultUser.hasStatus;
}
- (SInt32) status {
  return resultUser.status;
}
- (UserBuilder*) setStatus:(SInt32) value {
  resultUser.hasStatus = YES;
  resultUser.status = value;
  return self;
}
- (UserBuilder*) clearStatus {
  resultUser.hasStatus = NO;
  resultUser.status = 0;
  return self;
}
- (BOOL) hasNickname {
  return resultUser.hasNickname;
}
- (NSString*) nickname {
  return resultUser.nickname;
}
- (UserBuilder*) setNickname:(NSString*) value {
  resultUser.hasNickname = YES;
  resultUser.nickname = value;
  return self;
}
- (UserBuilder*) clearNickname {
  resultUser.hasNickname = NO;
  resultUser.nickname = @"";
  return self;
}
- (BOOL) hasGuard {
  return resultUser.hasGuard;
}
- (SInt32) guard {
  return resultUser.guard;
}
- (UserBuilder*) setGuard:(SInt32) value {
  resultUser.hasGuard = YES;
  resultUser.guard = value;
  return self;
}
- (UserBuilder*) clearGuard {
  resultUser.hasGuard = NO;
  resultUser.guard = 0;
  return self;
}
- (BOOL) hasRider {
  return resultUser.hasRider;
}
- (SInt32) rider {
  return resultUser.rider;
}
- (UserBuilder*) setRider:(SInt32) value {
  resultUser.hasRider = YES;
  resultUser.rider = value;
  return self;
}
- (UserBuilder*) clearRider {
  resultUser.hasRider = NO;
  resultUser.rider = 0;
  return self;
}
- (BOOL) hasPortrait {
  return resultUser.hasPortrait;
}
- (NSString*) portrait {
  return resultUser.portrait;
}
- (UserBuilder*) setPortrait:(NSString*) value {
  resultUser.hasPortrait = YES;
  resultUser.portrait = value;
  return self;
}
- (UserBuilder*) clearPortrait {
  resultUser.hasPortrait = NO;
  resultUser.portrait = @"";
  return self;
}
@end

@interface LiveData ()
@property SInt32 online;
@property SInt32 starlight;
@property SInt32 fight;
@property SInt32 status;
@property SInt32 views;
@property SInt32 duration;
@property SInt32 maxOnline;
@end

@implementation LiveData

- (BOOL) hasOnline {
  return !!hasOnline_;
}
- (void) setHasOnline:(BOOL) _value_ {
  hasOnline_ = !!_value_;
}
@synthesize online;
- (BOOL) hasStarlight {
  return !!hasStarlight_;
}
- (void) setHasStarlight:(BOOL) _value_ {
  hasStarlight_ = !!_value_;
}
@synthesize starlight;
- (BOOL) hasFight {
  return !!hasFight_;
}
- (void) setHasFight:(BOOL) _value_ {
  hasFight_ = !!_value_;
}
@synthesize fight;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasViews {
  return !!hasViews_;
}
- (void) setHasViews:(BOOL) _value_ {
  hasViews_ = !!_value_;
}
@synthesize views;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) _value_ {
  hasDuration_ = !!_value_;
}
@synthesize duration;
- (BOOL) hasMaxOnline {
  return !!hasMaxOnline_;
}
- (void) setHasMaxOnline:(BOOL) _value_ {
  hasMaxOnline_ = !!_value_;
}
@synthesize maxOnline;
- (instancetype) init {
  if ((self = [super init])) {
    self.online = 0;
    self.starlight = 0;
    self.fight = 0;
    self.status = 0;
    self.views = 0;
    self.duration = 0;
    self.maxOnline = 0;
  }
  return self;
}
static LiveData* defaultLiveDataInstance = nil;
+ (void) initialize {
  if (self == [LiveData class]) {
    defaultLiveDataInstance = [[LiveData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLiveDataInstance;
}
- (instancetype) defaultInstance {
  return defaultLiveDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOnline) {
    return NO;
  }
  if (!self.hasStarlight) {
    return NO;
  }
  if (!self.hasFight) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnline) {
    [output writeInt32:1 value:self.online];
  }
  if (self.hasStarlight) {
    [output writeInt32:2 value:self.starlight];
  }
  if (self.hasFight) {
    [output writeInt32:3 value:self.fight];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  if (self.hasViews) {
    [output writeInt32:5 value:self.views];
  }
  if (self.hasDuration) {
    [output writeInt32:6 value:self.duration];
  }
  if (self.hasMaxOnline) {
    [output writeInt32:7 value:self.maxOnline];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnline) {
    size_ += computeInt32Size(1, self.online);
  }
  if (self.hasStarlight) {
    size_ += computeInt32Size(2, self.starlight);
  }
  if (self.hasFight) {
    size_ += computeInt32Size(3, self.fight);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(4, self.status);
  }
  if (self.hasViews) {
    size_ += computeInt32Size(5, self.views);
  }
  if (self.hasDuration) {
    size_ += computeInt32Size(6, self.duration);
  }
  if (self.hasMaxOnline) {
    size_ += computeInt32Size(7, self.maxOnline);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LiveData*) parseFromData:(NSData*) data {
  return (LiveData*)[[[LiveData builder] mergeFromData:data] build];
}
+ (LiveData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LiveData*)[[[LiveData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LiveData*) parseFromInputStream:(NSInputStream*) input {
  return (LiveData*)[[[LiveData builder] mergeFromInputStream:input] build];
}
+ (LiveData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LiveData*)[[[LiveData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LiveData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LiveData*)[[[LiveData builder] mergeFromCodedInputStream:input] build];
}
+ (LiveData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LiveData*)[[[LiveData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LiveDataBuilder*) builder {
  return [[LiveDataBuilder alloc] init];
}
+ (LiveDataBuilder*) builderWithPrototype:(LiveData*) prototype {
  return [[LiveData builder] mergeFrom:prototype];
}
- (LiveDataBuilder*) builder {
  return [LiveData builder];
}
- (LiveDataBuilder*) toBuilder {
  return [LiveData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"online", [NSNumber numberWithInteger:self.online]];
  }
  if (self.hasStarlight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"starlight", [NSNumber numberWithInteger:self.starlight]];
  }
  if (self.hasFight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fight", [NSNumber numberWithInteger:self.fight]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasViews) {
    [output appendFormat:@"%@%@: %@\n", indent, @"views", [NSNumber numberWithInteger:self.views]];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInteger:self.duration]];
  }
  if (self.hasMaxOnline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxOnline", [NSNumber numberWithInteger:self.maxOnline]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnline) {
    [dictionary setObject: [NSNumber numberWithInteger:self.online] forKey: @"online"];
  }
  if (self.hasStarlight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.starlight] forKey: @"starlight"];
  }
  if (self.hasFight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fight] forKey: @"fight"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasViews) {
    [dictionary setObject: [NSNumber numberWithInteger:self.views] forKey: @"views"];
  }
  if (self.hasDuration) {
    [dictionary setObject: [NSNumber numberWithInteger:self.duration] forKey: @"duration"];
  }
  if (self.hasMaxOnline) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxOnline] forKey: @"maxOnline"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LiveData class]]) {
    return NO;
  }
  LiveData *otherMessage = other;
  return
      self.hasOnline == otherMessage.hasOnline &&
      (!self.hasOnline || self.online == otherMessage.online) &&
      self.hasStarlight == otherMessage.hasStarlight &&
      (!self.hasStarlight || self.starlight == otherMessage.starlight) &&
      self.hasFight == otherMessage.hasFight &&
      (!self.hasFight || self.fight == otherMessage.fight) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasViews == otherMessage.hasViews &&
      (!self.hasViews || self.views == otherMessage.views) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasMaxOnline == otherMessage.hasMaxOnline &&
      (!self.hasMaxOnline || self.maxOnline == otherMessage.maxOnline) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.online] hash];
  }
  if (self.hasStarlight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.starlight] hash];
  }
  if (self.hasFight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fight] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasViews) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.views] hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.duration] hash];
  }
  if (self.hasMaxOnline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxOnline] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LiveDataBuilder()
@property (strong) LiveData* resultLiveData;
@end

@implementation LiveDataBuilder
@synthesize resultLiveData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLiveData = [[LiveData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLiveData;
}
- (LiveDataBuilder*) clear {
  self.resultLiveData = [[LiveData alloc] init];
  return self;
}
- (LiveDataBuilder*) clone {
  return [LiveData builderWithPrototype:resultLiveData];
}
- (LiveData*) defaultInstance {
  return [LiveData defaultInstance];
}
- (LiveData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LiveData*) buildPartial {
  LiveData* returnMe = resultLiveData;
  self.resultLiveData = nil;
  return returnMe;
}
- (LiveDataBuilder*) mergeFrom:(LiveData*) other {
  if (other == [LiveData defaultInstance]) {
    return self;
  }
  if (other.hasOnline) {
    [self setOnline:other.online];
  }
  if (other.hasStarlight) {
    [self setStarlight:other.starlight];
  }
  if (other.hasFight) {
    [self setFight:other.fight];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasViews) {
    [self setViews:other.views];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasMaxOnline) {
    [self setMaxOnline:other.maxOnline];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LiveDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LiveDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnline:[input readInt32]];
        break;
      }
      case 16: {
        [self setStarlight:[input readInt32]];
        break;
      }
      case 24: {
        [self setFight:[input readInt32]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 40: {
        [self setViews:[input readInt32]];
        break;
      }
      case 48: {
        [self setDuration:[input readInt32]];
        break;
      }
      case 56: {
        [self setMaxOnline:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOnline {
  return resultLiveData.hasOnline;
}
- (SInt32) online {
  return resultLiveData.online;
}
- (LiveDataBuilder*) setOnline:(SInt32) value {
  resultLiveData.hasOnline = YES;
  resultLiveData.online = value;
  return self;
}
- (LiveDataBuilder*) clearOnline {
  resultLiveData.hasOnline = NO;
  resultLiveData.online = 0;
  return self;
}
- (BOOL) hasStarlight {
  return resultLiveData.hasStarlight;
}
- (SInt32) starlight {
  return resultLiveData.starlight;
}
- (LiveDataBuilder*) setStarlight:(SInt32) value {
  resultLiveData.hasStarlight = YES;
  resultLiveData.starlight = value;
  return self;
}
- (LiveDataBuilder*) clearStarlight {
  resultLiveData.hasStarlight = NO;
  resultLiveData.starlight = 0;
  return self;
}
- (BOOL) hasFight {
  return resultLiveData.hasFight;
}
- (SInt32) fight {
  return resultLiveData.fight;
}
- (LiveDataBuilder*) setFight:(SInt32) value {
  resultLiveData.hasFight = YES;
  resultLiveData.fight = value;
  return self;
}
- (LiveDataBuilder*) clearFight {
  resultLiveData.hasFight = NO;
  resultLiveData.fight = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultLiveData.hasStatus;
}
- (SInt32) status {
  return resultLiveData.status;
}
- (LiveDataBuilder*) setStatus:(SInt32) value {
  resultLiveData.hasStatus = YES;
  resultLiveData.status = value;
  return self;
}
- (LiveDataBuilder*) clearStatus {
  resultLiveData.hasStatus = NO;
  resultLiveData.status = 0;
  return self;
}
- (BOOL) hasViews {
  return resultLiveData.hasViews;
}
- (SInt32) views {
  return resultLiveData.views;
}
- (LiveDataBuilder*) setViews:(SInt32) value {
  resultLiveData.hasViews = YES;
  resultLiveData.views = value;
  return self;
}
- (LiveDataBuilder*) clearViews {
  resultLiveData.hasViews = NO;
  resultLiveData.views = 0;
  return self;
}
- (BOOL) hasDuration {
  return resultLiveData.hasDuration;
}
- (SInt32) duration {
  return resultLiveData.duration;
}
- (LiveDataBuilder*) setDuration:(SInt32) value {
  resultLiveData.hasDuration = YES;
  resultLiveData.duration = value;
  return self;
}
- (LiveDataBuilder*) clearDuration {
  resultLiveData.hasDuration = NO;
  resultLiveData.duration = 0;
  return self;
}
- (BOOL) hasMaxOnline {
  return resultLiveData.hasMaxOnline;
}
- (SInt32) maxOnline {
  return resultLiveData.maxOnline;
}
- (LiveDataBuilder*) setMaxOnline:(SInt32) value {
  resultLiveData.hasMaxOnline = YES;
  resultLiveData.maxOnline = value;
  return self;
}
- (LiveDataBuilder*) clearMaxOnline {
  resultLiveData.hasMaxOnline = NO;
  resultLiveData.maxOnline = 0;
  return self;
}
@end

@interface RoomAttr ()
@property SInt32 priv;
@property SInt32 guard;
@end

@implementation RoomAttr

- (BOOL) hasPriv {
  return !!hasPriv_;
}
- (void) setHasPriv:(BOOL) _value_ {
  hasPriv_ = !!_value_;
}
@synthesize priv;
- (BOOL) hasGuard {
  return !!hasGuard_;
}
- (void) setHasGuard:(BOOL) _value_ {
  hasGuard_ = !!_value_;
}
@synthesize guard;
- (instancetype) init {
  if ((self = [super init])) {
    self.priv = 0;
    self.guard = 0;
  }
  return self;
}
static RoomAttr* defaultRoomAttrInstance = nil;
+ (void) initialize {
  if (self == [RoomAttr class]) {
    defaultRoomAttrInstance = [[RoomAttr alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomAttrInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomAttrInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPriv) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPriv) {
    [output writeInt32:1 value:self.priv];
  }
  if (self.hasGuard) {
    [output writeInt32:2 value:self.guard];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPriv) {
    size_ += computeInt32Size(1, self.priv);
  }
  if (self.hasGuard) {
    size_ += computeInt32Size(2, self.guard);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomAttr*) parseFromData:(NSData*) data {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromData:data] build];
}
+ (RoomAttr*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomAttr*) parseFromInputStream:(NSInputStream*) input {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromInputStream:input] build];
}
+ (RoomAttr*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromCodedInputStream:input] build];
}
+ (RoomAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAttr*)[[[RoomAttr builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomAttrBuilder*) builder {
  return [[RoomAttrBuilder alloc] init];
}
+ (RoomAttrBuilder*) builderWithPrototype:(RoomAttr*) prototype {
  return [[RoomAttr builder] mergeFrom:prototype];
}
- (RoomAttrBuilder*) builder {
  return [RoomAttr builder];
}
- (RoomAttrBuilder*) toBuilder {
  return [RoomAttr builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPriv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priv", [NSNumber numberWithInteger:self.priv]];
  }
  if (self.hasGuard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guard", [NSNumber numberWithInteger:self.guard]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPriv) {
    [dictionary setObject: [NSNumber numberWithInteger:self.priv] forKey: @"priv"];
  }
  if (self.hasGuard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.guard] forKey: @"guard"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomAttr class]]) {
    return NO;
  }
  RoomAttr *otherMessage = other;
  return
      self.hasPriv == otherMessage.hasPriv &&
      (!self.hasPriv || self.priv == otherMessage.priv) &&
      self.hasGuard == otherMessage.hasGuard &&
      (!self.hasGuard || self.guard == otherMessage.guard) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPriv) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priv] hash];
  }
  if (self.hasGuard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.guard] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomAttrBuilder()
@property (strong) RoomAttr* resultRoomAttr;
@end

@implementation RoomAttrBuilder
@synthesize resultRoomAttr;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomAttr = [[RoomAttr alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomAttr;
}
- (RoomAttrBuilder*) clear {
  self.resultRoomAttr = [[RoomAttr alloc] init];
  return self;
}
- (RoomAttrBuilder*) clone {
  return [RoomAttr builderWithPrototype:resultRoomAttr];
}
- (RoomAttr*) defaultInstance {
  return [RoomAttr defaultInstance];
}
- (RoomAttr*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomAttr*) buildPartial {
  RoomAttr* returnMe = resultRoomAttr;
  self.resultRoomAttr = nil;
  return returnMe;
}
- (RoomAttrBuilder*) mergeFrom:(RoomAttr*) other {
  if (other == [RoomAttr defaultInstance]) {
    return self;
  }
  if (other.hasPriv) {
    [self setPriv:other.priv];
  }
  if (other.hasGuard) {
    [self setGuard:other.guard];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPriv:[input readInt32]];
        break;
      }
      case 16: {
        [self setGuard:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPriv {
  return resultRoomAttr.hasPriv;
}
- (SInt32) priv {
  return resultRoomAttr.priv;
}
- (RoomAttrBuilder*) setPriv:(SInt32) value {
  resultRoomAttr.hasPriv = YES;
  resultRoomAttr.priv = value;
  return self;
}
- (RoomAttrBuilder*) clearPriv {
  resultRoomAttr.hasPriv = NO;
  resultRoomAttr.priv = 0;
  return self;
}
- (BOOL) hasGuard {
  return resultRoomAttr.hasGuard;
}
- (SInt32) guard {
  return resultRoomAttr.guard;
}
- (RoomAttrBuilder*) setGuard:(SInt32) value {
  resultRoomAttr.hasGuard = YES;
  resultRoomAttr.guard = value;
  return self;
}
- (RoomAttrBuilder*) clearGuard {
  resultRoomAttr.hasGuard = NO;
  resultRoomAttr.guard = 0;
  return self;
}
@end

@interface RetetionAttr ()
@property SInt32 aliveTime;
@property SInt32 nowTime;
@property SInt32 startTime;
@property SInt32 id;
@end

@implementation RetetionAttr

- (BOOL) hasAliveTime {
  return !!hasAliveTime_;
}
- (void) setHasAliveTime:(BOOL) _value_ {
  hasAliveTime_ = !!_value_;
}
@synthesize aliveTime;
- (BOOL) hasNowTime {
  return !!hasNowTime_;
}
- (void) setHasNowTime:(BOOL) _value_ {
  hasNowTime_ = !!_value_;
}
@synthesize nowTime;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.aliveTime = 0;
    self.nowTime = 0;
    self.startTime = 0;
    self.id = 0;
  }
  return self;
}
static RetetionAttr* defaultRetetionAttrInstance = nil;
+ (void) initialize {
  if (self == [RetetionAttr class]) {
    defaultRetetionAttrInstance = [[RetetionAttr alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRetetionAttrInstance;
}
- (instancetype) defaultInstance {
  return defaultRetetionAttrInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAliveTime) {
    return NO;
  }
  if (!self.hasNowTime) {
    return NO;
  }
  if (!self.hasStartTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAliveTime) {
    [output writeInt32:1 value:self.aliveTime];
  }
  if (self.hasNowTime) {
    [output writeInt32:2 value:self.nowTime];
  }
  if (self.hasStartTime) {
    [output writeInt32:3 value:self.startTime];
  }
  if (self.hasId) {
    [output writeInt32:4 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAliveTime) {
    size_ += computeInt32Size(1, self.aliveTime);
  }
  if (self.hasNowTime) {
    size_ += computeInt32Size(2, self.nowTime);
  }
  if (self.hasStartTime) {
    size_ += computeInt32Size(3, self.startTime);
  }
  if (self.hasId) {
    size_ += computeInt32Size(4, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RetetionAttr*) parseFromData:(NSData*) data {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromData:data] build];
}
+ (RetetionAttr*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RetetionAttr*) parseFromInputStream:(NSInputStream*) input {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromInputStream:input] build];
}
+ (RetetionAttr*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetetionAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromCodedInputStream:input] build];
}
+ (RetetionAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetetionAttr*)[[[RetetionAttr builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetetionAttrBuilder*) builder {
  return [[RetetionAttrBuilder alloc] init];
}
+ (RetetionAttrBuilder*) builderWithPrototype:(RetetionAttr*) prototype {
  return [[RetetionAttr builder] mergeFrom:prototype];
}
- (RetetionAttrBuilder*) builder {
  return [RetetionAttr builder];
}
- (RetetionAttrBuilder*) toBuilder {
  return [RetetionAttr builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAliveTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aliveTime", [NSNumber numberWithInteger:self.aliveTime]];
  }
  if (self.hasNowTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nowTime", [NSNumber numberWithInteger:self.nowTime]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInteger:self.startTime]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAliveTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.aliveTime] forKey: @"aliveTime"];
  }
  if (self.hasNowTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nowTime] forKey: @"nowTime"];
  }
  if (self.hasStartTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.startTime] forKey: @"startTime"];
  }
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RetetionAttr class]]) {
    return NO;
  }
  RetetionAttr *otherMessage = other;
  return
      self.hasAliveTime == otherMessage.hasAliveTime &&
      (!self.hasAliveTime || self.aliveTime == otherMessage.aliveTime) &&
      self.hasNowTime == otherMessage.hasNowTime &&
      (!self.hasNowTime || self.nowTime == otherMessage.nowTime) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAliveTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.aliveTime] hash];
  }
  if (self.hasNowTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nowTime] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startTime] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RetetionAttrBuilder()
@property (strong) RetetionAttr* resultRetetionAttr;
@end

@implementation RetetionAttrBuilder
@synthesize resultRetetionAttr;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRetetionAttr = [[RetetionAttr alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRetetionAttr;
}
- (RetetionAttrBuilder*) clear {
  self.resultRetetionAttr = [[RetetionAttr alloc] init];
  return self;
}
- (RetetionAttrBuilder*) clone {
  return [RetetionAttr builderWithPrototype:resultRetetionAttr];
}
- (RetetionAttr*) defaultInstance {
  return [RetetionAttr defaultInstance];
}
- (RetetionAttr*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RetetionAttr*) buildPartial {
  RetetionAttr* returnMe = resultRetetionAttr;
  self.resultRetetionAttr = nil;
  return returnMe;
}
- (RetetionAttrBuilder*) mergeFrom:(RetetionAttr*) other {
  if (other == [RetetionAttr defaultInstance]) {
    return self;
  }
  if (other.hasAliveTime) {
    [self setAliveTime:other.aliveTime];
  }
  if (other.hasNowTime) {
    [self setNowTime:other.nowTime];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RetetionAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RetetionAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAliveTime:[input readInt32]];
        break;
      }
      case 16: {
        [self setNowTime:[input readInt32]];
        break;
      }
      case 24: {
        [self setStartTime:[input readInt32]];
        break;
      }
      case 32: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAliveTime {
  return resultRetetionAttr.hasAliveTime;
}
- (SInt32) aliveTime {
  return resultRetetionAttr.aliveTime;
}
- (RetetionAttrBuilder*) setAliveTime:(SInt32) value {
  resultRetetionAttr.hasAliveTime = YES;
  resultRetetionAttr.aliveTime = value;
  return self;
}
- (RetetionAttrBuilder*) clearAliveTime {
  resultRetetionAttr.hasAliveTime = NO;
  resultRetetionAttr.aliveTime = 0;
  return self;
}
- (BOOL) hasNowTime {
  return resultRetetionAttr.hasNowTime;
}
- (SInt32) nowTime {
  return resultRetetionAttr.nowTime;
}
- (RetetionAttrBuilder*) setNowTime:(SInt32) value {
  resultRetetionAttr.hasNowTime = YES;
  resultRetetionAttr.nowTime = value;
  return self;
}
- (RetetionAttrBuilder*) clearNowTime {
  resultRetetionAttr.hasNowTime = NO;
  resultRetetionAttr.nowTime = 0;
  return self;
}
- (BOOL) hasStartTime {
  return resultRetetionAttr.hasStartTime;
}
- (SInt32) startTime {
  return resultRetetionAttr.startTime;
}
- (RetetionAttrBuilder*) setStartTime:(SInt32) value {
  resultRetetionAttr.hasStartTime = YES;
  resultRetetionAttr.startTime = value;
  return self;
}
- (RetetionAttrBuilder*) clearStartTime {
  resultRetetionAttr.hasStartTime = NO;
  resultRetetionAttr.startTime = 0;
  return self;
}
- (BOOL) hasId {
  return resultRetetionAttr.hasId;
}
- (SInt32) id {
  return resultRetetionAttr.id;
}
- (RetetionAttrBuilder*) setId:(SInt32) value {
  resultRetetionAttr.hasId = YES;
  resultRetetionAttr.id = value;
  return self;
}
- (RetetionAttrBuilder*) clearId {
  resultRetetionAttr.hasId = NO;
  resultRetetionAttr.id = 0;
  return self;
}
@end

@interface LoginReq ()
@property SInt32 uid;
@property (strong) NSString* pwd;
@property (strong) NSString* devid;
@property (strong) NSString* app;
@property SInt64 rt;
@property (strong) NSString* vk;
@property (strong) NSString* ver;
@property (strong) NSString* channel;
@end

@implementation LoginReq

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasPwd {
  return !!hasPwd_;
}
- (void) setHasPwd:(BOOL) _value_ {
  hasPwd_ = !!_value_;
}
@synthesize pwd;
- (BOOL) hasDevid {
  return !!hasDevid_;
}
- (void) setHasDevid:(BOOL) _value_ {
  hasDevid_ = !!_value_;
}
@synthesize devid;
- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) _value_ {
  hasApp_ = !!_value_;
}
@synthesize app;
- (BOOL) hasRt {
  return !!hasRt_;
}
- (void) setHasRt:(BOOL) _value_ {
  hasRt_ = !!_value_;
}
@synthesize rt;
- (BOOL) hasVk {
  return !!hasVk_;
}
- (void) setHasVk:(BOOL) _value_ {
  hasVk_ = !!_value_;
}
@synthesize vk;
- (BOOL) hasVer {
  return !!hasVer_;
}
- (void) setHasVer:(BOOL) _value_ {
  hasVer_ = !!_value_;
}
@synthesize ver;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.pwd = @"";
    self.devid = @"";
    self.app = @"";
    self.rt = 0L;
    self.vk = @"";
    self.ver = @"";
    self.channel = @"";
  }
  return self;
}
static LoginReq* defaultLoginReqInstance = nil;
+ (void) initialize {
  if (self == [LoginReq class]) {
    defaultLoginReqInstance = [[LoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasPwd) {
    return NO;
  }
  if (!self.hasDevid) {
    return NO;
  }
  if (!self.hasApp) {
    return NO;
  }
  if (!self.hasRt) {
    return NO;
  }
  if (!self.hasVk) {
    return NO;
  }
  if (!self.hasVer) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeInt32:1 value:self.uid];
  }
  if (self.hasPwd) {
    [output writeString:2 value:self.pwd];
  }
  if (self.hasDevid) {
    [output writeString:3 value:self.devid];
  }
  if (self.hasApp) {
    [output writeString:4 value:self.app];
  }
  if (self.hasRt) {
    [output writeInt64:5 value:self.rt];
  }
  if (self.hasVk) {
    [output writeString:6 value:self.vk];
  }
  if (self.hasVer) {
    [output writeString:7 value:self.ver];
  }
  if (self.hasChannel) {
    [output writeString:8 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeInt32Size(1, self.uid);
  }
  if (self.hasPwd) {
    size_ += computeStringSize(2, self.pwd);
  }
  if (self.hasDevid) {
    size_ += computeStringSize(3, self.devid);
  }
  if (self.hasApp) {
    size_ += computeStringSize(4, self.app);
  }
  if (self.hasRt) {
    size_ += computeInt64Size(5, self.rt);
  }
  if (self.hasVk) {
    size_ += computeStringSize(6, self.vk);
  }
  if (self.hasVer) {
    size_ += computeStringSize(7, self.ver);
  }
  if (self.hasChannel) {
    size_ += computeStringSize(8, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginReq*) parseFromData:(NSData*) data {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data] build];
}
+ (LoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReqBuilder*) builder {
  return [[LoginReqBuilder alloc] init];
}
+ (LoginReqBuilder*) builderWithPrototype:(LoginReq*) prototype {
  return [[LoginReq builder] mergeFrom:prototype];
}
- (LoginReqBuilder*) builder {
  return [LoginReq builder];
}
- (LoginReqBuilder*) toBuilder {
  return [LoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pwd", self.pwd];
  }
  if (self.hasDevid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"devid", self.devid];
  }
  if (self.hasApp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"app", self.app];
  }
  if (self.hasRt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rt", [NSNumber numberWithLongLong:self.rt]];
  }
  if (self.hasVk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vk", self.vk];
  }
  if (self.hasVer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ver", self.ver];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", self.channel];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasPwd) {
    [dictionary setObject: self.pwd forKey: @"pwd"];
  }
  if (self.hasDevid) {
    [dictionary setObject: self.devid forKey: @"devid"];
  }
  if (self.hasApp) {
    [dictionary setObject: self.app forKey: @"app"];
  }
  if (self.hasRt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.rt] forKey: @"rt"];
  }
  if (self.hasVk) {
    [dictionary setObject: self.vk forKey: @"vk"];
  }
  if (self.hasVer) {
    [dictionary setObject: self.ver forKey: @"ver"];
  }
  if (self.hasChannel) {
    [dictionary setObject: self.channel forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginReq class]]) {
    return NO;
  }
  LoginReq *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasPwd == otherMessage.hasPwd &&
      (!self.hasPwd || [self.pwd isEqual:otherMessage.pwd]) &&
      self.hasDevid == otherMessage.hasDevid &&
      (!self.hasDevid || [self.devid isEqual:otherMessage.devid]) &&
      self.hasApp == otherMessage.hasApp &&
      (!self.hasApp || [self.app isEqual:otherMessage.app]) &&
      self.hasRt == otherMessage.hasRt &&
      (!self.hasRt || self.rt == otherMessage.rt) &&
      self.hasVk == otherMessage.hasVk &&
      (!self.hasVk || [self.vk isEqual:otherMessage.vk]) &&
      self.hasVer == otherMessage.hasVer &&
      (!self.hasVer || [self.ver isEqual:otherMessage.ver]) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || [self.channel isEqual:otherMessage.channel]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasPwd) {
    hashCode = hashCode * 31 + [self.pwd hash];
  }
  if (self.hasDevid) {
    hashCode = hashCode * 31 + [self.devid hash];
  }
  if (self.hasApp) {
    hashCode = hashCode * 31 + [self.app hash];
  }
  if (self.hasRt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.rt] hash];
  }
  if (self.hasVk) {
    hashCode = hashCode * 31 + [self.vk hash];
  }
  if (self.hasVer) {
    hashCode = hashCode * 31 + [self.ver hash];
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + [self.channel hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginReqBuilder()
@property (strong) LoginReq* resultLoginReq;
@end

@implementation LoginReqBuilder
@synthesize resultLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginReq = [[LoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginReq;
}
- (LoginReqBuilder*) clear {
  self.resultLoginReq = [[LoginReq alloc] init];
  return self;
}
- (LoginReqBuilder*) clone {
  return [LoginReq builderWithPrototype:resultLoginReq];
}
- (LoginReq*) defaultInstance {
  return [LoginReq defaultInstance];
}
- (LoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginReq*) buildPartial {
  LoginReq* returnMe = resultLoginReq;
  self.resultLoginReq = nil;
  return returnMe;
}
- (LoginReqBuilder*) mergeFrom:(LoginReq*) other {
  if (other == [LoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasPwd) {
    [self setPwd:other.pwd];
  }
  if (other.hasDevid) {
    [self setDevid:other.devid];
  }
  if (other.hasApp) {
    [self setApp:other.app];
  }
  if (other.hasRt) {
    [self setRt:other.rt];
  }
  if (other.hasVk) {
    [self setVk:other.vk];
  }
  if (other.hasVer) {
    [self setVer:other.ver];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readInt32]];
        break;
      }
      case 18: {
        [self setPwd:[input readString]];
        break;
      }
      case 26: {
        [self setDevid:[input readString]];
        break;
      }
      case 34: {
        [self setApp:[input readString]];
        break;
      }
      case 40: {
        [self setRt:[input readInt64]];
        break;
      }
      case 50: {
        [self setVk:[input readString]];
        break;
      }
      case 58: {
        [self setVer:[input readString]];
        break;
      }
      case 66: {
        [self setChannel:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultLoginReq.hasUid;
}
- (SInt32) uid {
  return resultLoginReq.uid;
}
- (LoginReqBuilder*) setUid:(SInt32) value {
  resultLoginReq.hasUid = YES;
  resultLoginReq.uid = value;
  return self;
}
- (LoginReqBuilder*) clearUid {
  resultLoginReq.hasUid = NO;
  resultLoginReq.uid = 0;
  return self;
}
- (BOOL) hasPwd {
  return resultLoginReq.hasPwd;
}
- (NSString*) pwd {
  return resultLoginReq.pwd;
}
- (LoginReqBuilder*) setPwd:(NSString*) value {
  resultLoginReq.hasPwd = YES;
  resultLoginReq.pwd = value;
  return self;
}
- (LoginReqBuilder*) clearPwd {
  resultLoginReq.hasPwd = NO;
  resultLoginReq.pwd = @"";
  return self;
}
- (BOOL) hasDevid {
  return resultLoginReq.hasDevid;
}
- (NSString*) devid {
  return resultLoginReq.devid;
}
- (LoginReqBuilder*) setDevid:(NSString*) value {
  resultLoginReq.hasDevid = YES;
  resultLoginReq.devid = value;
  return self;
}
- (LoginReqBuilder*) clearDevid {
  resultLoginReq.hasDevid = NO;
  resultLoginReq.devid = @"";
  return self;
}
- (BOOL) hasApp {
  return resultLoginReq.hasApp;
}
- (NSString*) app {
  return resultLoginReq.app;
}
- (LoginReqBuilder*) setApp:(NSString*) value {
  resultLoginReq.hasApp = YES;
  resultLoginReq.app = value;
  return self;
}
- (LoginReqBuilder*) clearApp {
  resultLoginReq.hasApp = NO;
  resultLoginReq.app = @"";
  return self;
}
- (BOOL) hasRt {
  return resultLoginReq.hasRt;
}
- (SInt64) rt {
  return resultLoginReq.rt;
}
- (LoginReqBuilder*) setRt:(SInt64) value {
  resultLoginReq.hasRt = YES;
  resultLoginReq.rt = value;
  return self;
}
- (LoginReqBuilder*) clearRt {
  resultLoginReq.hasRt = NO;
  resultLoginReq.rt = 0L;
  return self;
}
- (BOOL) hasVk {
  return resultLoginReq.hasVk;
}
- (NSString*) vk {
  return resultLoginReq.vk;
}
- (LoginReqBuilder*) setVk:(NSString*) value {
  resultLoginReq.hasVk = YES;
  resultLoginReq.vk = value;
  return self;
}
- (LoginReqBuilder*) clearVk {
  resultLoginReq.hasVk = NO;
  resultLoginReq.vk = @"";
  return self;
}
- (BOOL) hasVer {
  return resultLoginReq.hasVer;
}
- (NSString*) ver {
  return resultLoginReq.ver;
}
- (LoginReqBuilder*) setVer:(NSString*) value {
  resultLoginReq.hasVer = YES;
  resultLoginReq.ver = value;
  return self;
}
- (LoginReqBuilder*) clearVer {
  resultLoginReq.hasVer = NO;
  resultLoginReq.ver = @"";
  return self;
}
- (BOOL) hasChannel {
  return resultLoginReq.hasChannel;
}
- (NSString*) channel {
  return resultLoginReq.channel;
}
- (LoginReqBuilder*) setChannel:(NSString*) value {
  resultLoginReq.hasChannel = YES;
  resultLoginReq.channel = value;
  return self;
}
- (LoginReqBuilder*) clearChannel {
  resultLoginReq.hasChannel = NO;
  resultLoginReq.channel = @"";
  return self;
}
@end

@interface LoginRsp ()
@property SInt32 status;
@property SInt32 uid;
@end

@implementation LoginRsp

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = 0;
    self.uid = 0;
  }
  return self;
}
static LoginRsp* defaultLoginRspInstance = nil;
+ (void) initialize {
  if (self == [LoginRsp class]) {
    defaultLoginRspInstance = [[LoginRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginRspInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeInt32:1 value:self.status];
  }
  if (self.hasUid) {
    [output writeInt32:2 value:self.uid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeInt32Size(1, self.status);
  }
  if (self.hasUid) {
    size_ += computeInt32Size(2, self.uid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginRsp*) parseFromData:(NSData*) data {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromData:data] build];
}
+ (LoginRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginRsp*) parseFromInputStream:(NSInputStream*) input {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromInputStream:input] build];
}
+ (LoginRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromCodedInputStream:input] build];
}
+ (LoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRsp*)[[[LoginRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRspBuilder*) builder {
  return [[LoginRspBuilder alloc] init];
}
+ (LoginRspBuilder*) builderWithPrototype:(LoginRsp*) prototype {
  return [[LoginRsp builder] mergeFrom:prototype];
}
- (LoginRspBuilder*) builder {
  return [LoginRsp builder];
}
- (LoginRspBuilder*) toBuilder {
  return [LoginRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginRsp class]]) {
    return NO;
  }
  LoginRsp *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginRspBuilder()
@property (strong) LoginRsp* resultLoginRsp;
@end

@implementation LoginRspBuilder
@synthesize resultLoginRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginRsp = [[LoginRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginRsp;
}
- (LoginRspBuilder*) clear {
  self.resultLoginRsp = [[LoginRsp alloc] init];
  return self;
}
- (LoginRspBuilder*) clone {
  return [LoginRsp builderWithPrototype:resultLoginRsp];
}
- (LoginRsp*) defaultInstance {
  return [LoginRsp defaultInstance];
}
- (LoginRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginRsp*) buildPartial {
  LoginRsp* returnMe = resultLoginRsp;
  self.resultLoginRsp = nil;
  return returnMe;
}
- (LoginRspBuilder*) mergeFrom:(LoginRsp*) other {
  if (other == [LoginRsp defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultLoginRsp.hasStatus;
}
- (SInt32) status {
  return resultLoginRsp.status;
}
- (LoginRspBuilder*) setStatus:(SInt32) value {
  resultLoginRsp.hasStatus = YES;
  resultLoginRsp.status = value;
  return self;
}
- (LoginRspBuilder*) clearStatus {
  resultLoginRsp.hasStatus = NO;
  resultLoginRsp.status = 0;
  return self;
}
- (BOOL) hasUid {
  return resultLoginRsp.hasUid;
}
- (SInt32) uid {
  return resultLoginRsp.uid;
}
- (LoginRspBuilder*) setUid:(SInt32) value {
  resultLoginRsp.hasUid = YES;
  resultLoginRsp.uid = value;
  return self;
}
- (LoginRspBuilder*) clearUid {
  resultLoginRsp.hasUid = NO;
  resultLoginRsp.uid = 0;
  return self;
}
@end

@interface RoomJoinReq ()
@property SInt32 owid;
@end

@implementation RoomJoinReq

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
  }
  return self;
}
static RoomJoinReq* defaultRoomJoinReqInstance = nil;
+ (void) initialize {
  if (self == [RoomJoinReq class]) {
    defaultRoomJoinReqInstance = [[RoomJoinReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomJoinReqInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomJoinReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomJoinReq*) parseFromData:(NSData*) data {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromData:data] build];
}
+ (RoomJoinReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinReq*) parseFromInputStream:(NSInputStream*) input {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromInputStream:input] build];
}
+ (RoomJoinReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromCodedInputStream:input] build];
}
+ (RoomJoinReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinReq*)[[[RoomJoinReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinReqBuilder*) builder {
  return [[RoomJoinReqBuilder alloc] init];
}
+ (RoomJoinReqBuilder*) builderWithPrototype:(RoomJoinReq*) prototype {
  return [[RoomJoinReq builder] mergeFrom:prototype];
}
- (RoomJoinReqBuilder*) builder {
  return [RoomJoinReq builder];
}
- (RoomJoinReqBuilder*) toBuilder {
  return [RoomJoinReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomJoinReq class]]) {
    return NO;
  }
  RoomJoinReq *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomJoinReqBuilder()
@property (strong) RoomJoinReq* resultRoomJoinReq;
@end

@implementation RoomJoinReqBuilder
@synthesize resultRoomJoinReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomJoinReq = [[RoomJoinReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomJoinReq;
}
- (RoomJoinReqBuilder*) clear {
  self.resultRoomJoinReq = [[RoomJoinReq alloc] init];
  return self;
}
- (RoomJoinReqBuilder*) clone {
  return [RoomJoinReq builderWithPrototype:resultRoomJoinReq];
}
- (RoomJoinReq*) defaultInstance {
  return [RoomJoinReq defaultInstance];
}
- (RoomJoinReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomJoinReq*) buildPartial {
  RoomJoinReq* returnMe = resultRoomJoinReq;
  self.resultRoomJoinReq = nil;
  return returnMe;
}
- (RoomJoinReqBuilder*) mergeFrom:(RoomJoinReq*) other {
  if (other == [RoomJoinReq defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomJoinReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomJoinReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomJoinReq.hasOwid;
}
- (SInt32) owid {
  return resultRoomJoinReq.owid;
}
- (RoomJoinReqBuilder*) setOwid:(SInt32) value {
  resultRoomJoinReq.hasOwid = YES;
  resultRoomJoinReq.owid = value;
  return self;
}
- (RoomJoinReqBuilder*) clearOwid {
  resultRoomJoinReq.hasOwid = NO;
  resultRoomJoinReq.owid = 0;
  return self;
}
@end

@interface RoomJoinRsp ()
@property SInt32 owid;
@property SInt32 code;
@property (strong) RoomAttr* roomAttr;
@property (strong) LiveData* liveData;
@end

@implementation RoomJoinRsp

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasLiveData {
  return !!hasLiveData_;
}
- (void) setHasLiveData:(BOOL) _value_ {
  hasLiveData_ = !!_value_;
}
@synthesize liveData;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.code = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.liveData = [LiveData defaultInstance];
  }
  return self;
}
static RoomJoinRsp* defaultRoomJoinRspInstance = nil;
+ (void) initialize {
  if (self == [RoomJoinRsp class]) {
    defaultRoomJoinRspInstance = [[RoomJoinRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomJoinRspInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomJoinRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  if (self.hasRoomAttr) {
    if (!self.roomAttr.isInitialized) {
      return NO;
    }
  }
  if (self.hasLiveData) {
    if (!self.liveData.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasCode) {
    [output writeInt32:2 value:self.code];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:3 value:self.roomAttr];
  }
  if (self.hasLiveData) {
    [output writeMessage:4 value:self.liveData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasCode) {
    size_ += computeInt32Size(2, self.code);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(3, self.roomAttr);
  }
  if (self.hasLiveData) {
    size_ += computeMessageSize(4, self.liveData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomJoinRsp*) parseFromData:(NSData*) data {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromData:data] build];
}
+ (RoomJoinRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinRsp*) parseFromInputStream:(NSInputStream*) input {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromInputStream:input] build];
}
+ (RoomJoinRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromCodedInputStream:input] build];
}
+ (RoomJoinRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinRsp*)[[[RoomJoinRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinRspBuilder*) builder {
  return [[RoomJoinRspBuilder alloc] init];
}
+ (RoomJoinRspBuilder*) builderWithPrototype:(RoomJoinRsp*) prototype {
  return [[RoomJoinRsp builder] mergeFrom:prototype];
}
- (RoomJoinRspBuilder*) builder {
  return [RoomJoinRsp builder];
}
- (RoomJoinRspBuilder*) toBuilder {
  return [RoomJoinRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLiveData) {
    [output appendFormat:@"%@%@ {\n", indent, @"liveData"];
    [self.liveData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasLiveData) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.liveData storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"liveData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomJoinRsp class]]) {
    return NO;
  }
  RoomJoinRsp *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasLiveData == otherMessage.hasLiveData &&
      (!self.hasLiveData || [self.liveData isEqual:otherMessage.liveData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasLiveData) {
    hashCode = hashCode * 31 + [self.liveData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomJoinRspBuilder()
@property (strong) RoomJoinRsp* resultRoomJoinRsp;
@end

@implementation RoomJoinRspBuilder
@synthesize resultRoomJoinRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomJoinRsp = [[RoomJoinRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomJoinRsp;
}
- (RoomJoinRspBuilder*) clear {
  self.resultRoomJoinRsp = [[RoomJoinRsp alloc] init];
  return self;
}
- (RoomJoinRspBuilder*) clone {
  return [RoomJoinRsp builderWithPrototype:resultRoomJoinRsp];
}
- (RoomJoinRsp*) defaultInstance {
  return [RoomJoinRsp defaultInstance];
}
- (RoomJoinRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomJoinRsp*) buildPartial {
  RoomJoinRsp* returnMe = resultRoomJoinRsp;
  self.resultRoomJoinRsp = nil;
  return returnMe;
}
- (RoomJoinRspBuilder*) mergeFrom:(RoomJoinRsp*) other {
  if (other == [RoomJoinRsp defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasLiveData) {
    [self mergeLiveData:other.liveData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomJoinRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomJoinRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setCode:[input readInt32]];
        break;
      }
      case 26: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        LiveDataBuilder* subBuilder = [LiveData builder];
        if (self.hasLiveData) {
          [subBuilder mergeFrom:self.liveData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLiveData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomJoinRsp.hasOwid;
}
- (SInt32) owid {
  return resultRoomJoinRsp.owid;
}
- (RoomJoinRspBuilder*) setOwid:(SInt32) value {
  resultRoomJoinRsp.hasOwid = YES;
  resultRoomJoinRsp.owid = value;
  return self;
}
- (RoomJoinRspBuilder*) clearOwid {
  resultRoomJoinRsp.hasOwid = NO;
  resultRoomJoinRsp.owid = 0;
  return self;
}
- (BOOL) hasCode {
  return resultRoomJoinRsp.hasCode;
}
- (SInt32) code {
  return resultRoomJoinRsp.code;
}
- (RoomJoinRspBuilder*) setCode:(SInt32) value {
  resultRoomJoinRsp.hasCode = YES;
  resultRoomJoinRsp.code = value;
  return self;
}
- (RoomJoinRspBuilder*) clearCode {
  resultRoomJoinRsp.hasCode = NO;
  resultRoomJoinRsp.code = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultRoomJoinRsp.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultRoomJoinRsp.roomAttr;
}
- (RoomJoinRspBuilder*) setRoomAttr:(RoomAttr*) value {
  resultRoomJoinRsp.hasRoomAttr = YES;
  resultRoomJoinRsp.roomAttr = value;
  return self;
}
- (RoomJoinRspBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (RoomJoinRspBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultRoomJoinRsp.hasRoomAttr &&
      resultRoomJoinRsp.roomAttr != [RoomAttr defaultInstance]) {
    resultRoomJoinRsp.roomAttr =
      [[[RoomAttr builderWithPrototype:resultRoomJoinRsp.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultRoomJoinRsp.roomAttr = value;
  }
  resultRoomJoinRsp.hasRoomAttr = YES;
  return self;
}
- (RoomJoinRspBuilder*) clearRoomAttr {
  resultRoomJoinRsp.hasRoomAttr = NO;
  resultRoomJoinRsp.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasLiveData {
  return resultRoomJoinRsp.hasLiveData;
}
- (LiveData*) liveData {
  return resultRoomJoinRsp.liveData;
}
- (RoomJoinRspBuilder*) setLiveData:(LiveData*) value {
  resultRoomJoinRsp.hasLiveData = YES;
  resultRoomJoinRsp.liveData = value;
  return self;
}
- (RoomJoinRspBuilder*) setLiveDataBuilder:(LiveDataBuilder*) builderForValue {
  return [self setLiveData:[builderForValue build]];
}
- (RoomJoinRspBuilder*) mergeLiveData:(LiveData*) value {
  if (resultRoomJoinRsp.hasLiveData &&
      resultRoomJoinRsp.liveData != [LiveData defaultInstance]) {
    resultRoomJoinRsp.liveData =
      [[[LiveData builderWithPrototype:resultRoomJoinRsp.liveData] mergeFrom:value] buildPartial];
  } else {
    resultRoomJoinRsp.liveData = value;
  }
  resultRoomJoinRsp.hasLiveData = YES;
  return self;
}
- (RoomJoinRspBuilder*) clearLiveData {
  resultRoomJoinRsp.hasLiveData = NO;
  resultRoomJoinRsp.liveData = [LiveData defaultInstance];
  return self;
}
@end

@interface RoomJoinNotifyUp ()
@property SInt32 owid;
@end

@implementation RoomJoinNotifyUp

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
  }
  return self;
}
static RoomJoinNotifyUp* defaultRoomJoinNotifyUpInstance = nil;
+ (void) initialize {
  if (self == [RoomJoinNotifyUp class]) {
    defaultRoomJoinNotifyUpInstance = [[RoomJoinNotifyUp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomJoinNotifyUpInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomJoinNotifyUpInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomJoinNotifyUp*) parseFromData:(NSData*) data {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromData:data] build];
}
+ (RoomJoinNotifyUp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotifyUp*) parseFromInputStream:(NSInputStream*) input {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromInputStream:input] build];
}
+ (RoomJoinNotifyUp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotifyUp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromCodedInputStream:input] build];
}
+ (RoomJoinNotifyUp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotifyUp*)[[[RoomJoinNotifyUp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotifyUpBuilder*) builder {
  return [[RoomJoinNotifyUpBuilder alloc] init];
}
+ (RoomJoinNotifyUpBuilder*) builderWithPrototype:(RoomJoinNotifyUp*) prototype {
  return [[RoomJoinNotifyUp builder] mergeFrom:prototype];
}
- (RoomJoinNotifyUpBuilder*) builder {
  return [RoomJoinNotifyUp builder];
}
- (RoomJoinNotifyUpBuilder*) toBuilder {
  return [RoomJoinNotifyUp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomJoinNotifyUp class]]) {
    return NO;
  }
  RoomJoinNotifyUp *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomJoinNotifyUpBuilder()
@property (strong) RoomJoinNotifyUp* resultRoomJoinNotifyUp;
@end

@implementation RoomJoinNotifyUpBuilder
@synthesize resultRoomJoinNotifyUp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomJoinNotifyUp = [[RoomJoinNotifyUp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomJoinNotifyUp;
}
- (RoomJoinNotifyUpBuilder*) clear {
  self.resultRoomJoinNotifyUp = [[RoomJoinNotifyUp alloc] init];
  return self;
}
- (RoomJoinNotifyUpBuilder*) clone {
  return [RoomJoinNotifyUp builderWithPrototype:resultRoomJoinNotifyUp];
}
- (RoomJoinNotifyUp*) defaultInstance {
  return [RoomJoinNotifyUp defaultInstance];
}
- (RoomJoinNotifyUp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomJoinNotifyUp*) buildPartial {
  RoomJoinNotifyUp* returnMe = resultRoomJoinNotifyUp;
  self.resultRoomJoinNotifyUp = nil;
  return returnMe;
}
- (RoomJoinNotifyUpBuilder*) mergeFrom:(RoomJoinNotifyUp*) other {
  if (other == [RoomJoinNotifyUp defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomJoinNotifyUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomJoinNotifyUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomJoinNotifyUp.hasOwid;
}
- (SInt32) owid {
  return resultRoomJoinNotifyUp.owid;
}
- (RoomJoinNotifyUpBuilder*) setOwid:(SInt32) value {
  resultRoomJoinNotifyUp.hasOwid = YES;
  resultRoomJoinNotifyUp.owid = value;
  return self;
}
- (RoomJoinNotifyUpBuilder*) clearOwid {
  resultRoomJoinNotifyUp.hasOwid = NO;
  resultRoomJoinNotifyUp.owid = 0;
  return self;
}
@end

@interface RoomJoinNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@end

@implementation RoomJoinNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
  }
  return self;
}
static RoomJoinNotify* defaultRoomJoinNotifyInstance = nil;
+ (void) initialize {
  if (self == [RoomJoinNotify class]) {
    defaultRoomJoinNotifyInstance = [[RoomJoinNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomJoinNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomJoinNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomJoinNotify*) parseFromData:(NSData*) data {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromData:data] build];
}
+ (RoomJoinNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotify*) parseFromInputStream:(NSInputStream*) input {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromInputStream:input] build];
}
+ (RoomJoinNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromCodedInputStream:input] build];
}
+ (RoomJoinNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomJoinNotify*)[[[RoomJoinNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomJoinNotifyBuilder*) builder {
  return [[RoomJoinNotifyBuilder alloc] init];
}
+ (RoomJoinNotifyBuilder*) builderWithPrototype:(RoomJoinNotify*) prototype {
  return [[RoomJoinNotify builder] mergeFrom:prototype];
}
- (RoomJoinNotifyBuilder*) builder {
  return [RoomJoinNotify builder];
}
- (RoomJoinNotifyBuilder*) toBuilder {
  return [RoomJoinNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomJoinNotify class]]) {
    return NO;
  }
  RoomJoinNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomJoinNotifyBuilder()
@property (strong) RoomJoinNotify* resultRoomJoinNotify;
@end

@implementation RoomJoinNotifyBuilder
@synthesize resultRoomJoinNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomJoinNotify = [[RoomJoinNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomJoinNotify;
}
- (RoomJoinNotifyBuilder*) clear {
  self.resultRoomJoinNotify = [[RoomJoinNotify alloc] init];
  return self;
}
- (RoomJoinNotifyBuilder*) clone {
  return [RoomJoinNotify builderWithPrototype:resultRoomJoinNotify];
}
- (RoomJoinNotify*) defaultInstance {
  return [RoomJoinNotify defaultInstance];
}
- (RoomJoinNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomJoinNotify*) buildPartial {
  RoomJoinNotify* returnMe = resultRoomJoinNotify;
  self.resultRoomJoinNotify = nil;
  return returnMe;
}
- (RoomJoinNotifyBuilder*) mergeFrom:(RoomJoinNotify*) other {
  if (other == [RoomJoinNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomJoinNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomJoinNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomJoinNotify.hasOwid;
}
- (SInt32) owid {
  return resultRoomJoinNotify.owid;
}
- (RoomJoinNotifyBuilder*) setOwid:(SInt32) value {
  resultRoomJoinNotify.hasOwid = YES;
  resultRoomJoinNotify.owid = value;
  return self;
}
- (RoomJoinNotifyBuilder*) clearOwid {
  resultRoomJoinNotify.hasOwid = NO;
  resultRoomJoinNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultRoomJoinNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultRoomJoinNotify.roomAttr;
}
- (RoomJoinNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultRoomJoinNotify.hasRoomAttr = YES;
  resultRoomJoinNotify.roomAttr = value;
  return self;
}
- (RoomJoinNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (RoomJoinNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultRoomJoinNotify.hasRoomAttr &&
      resultRoomJoinNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultRoomJoinNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultRoomJoinNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultRoomJoinNotify.roomAttr = value;
  }
  resultRoomJoinNotify.hasRoomAttr = YES;
  return self;
}
- (RoomJoinNotifyBuilder*) clearRoomAttr {
  resultRoomJoinNotify.hasRoomAttr = NO;
  resultRoomJoinNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultRoomJoinNotify.hasUser;
}
- (User*) user {
  return resultRoomJoinNotify.user;
}
- (RoomJoinNotifyBuilder*) setUser:(User*) value {
  resultRoomJoinNotify.hasUser = YES;
  resultRoomJoinNotify.user = value;
  return self;
}
- (RoomJoinNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (RoomJoinNotifyBuilder*) mergeUser:(User*) value {
  if (resultRoomJoinNotify.hasUser &&
      resultRoomJoinNotify.user != [User defaultInstance]) {
    resultRoomJoinNotify.user =
      [[[User builderWithPrototype:resultRoomJoinNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultRoomJoinNotify.user = value;
  }
  resultRoomJoinNotify.hasUser = YES;
  return self;
}
- (RoomJoinNotifyBuilder*) clearUser {
  resultRoomJoinNotify.hasUser = NO;
  resultRoomJoinNotify.user = [User defaultInstance];
  return self;
}
@end

@interface RoomLeaveReq ()
@property SInt32 owid;
@end

@implementation RoomLeaveReq

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
  }
  return self;
}
static RoomLeaveReq* defaultRoomLeaveReqInstance = nil;
+ (void) initialize {
  if (self == [RoomLeaveReq class]) {
    defaultRoomLeaveReqInstance = [[RoomLeaveReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomLeaveReqInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomLeaveReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomLeaveReq*) parseFromData:(NSData*) data {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromData:data] build];
}
+ (RoomLeaveReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomLeaveReq*) parseFromInputStream:(NSInputStream*) input {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromInputStream:input] build];
}
+ (RoomLeaveReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomLeaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromCodedInputStream:input] build];
}
+ (RoomLeaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomLeaveReq*)[[[RoomLeaveReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomLeaveReqBuilder*) builder {
  return [[RoomLeaveReqBuilder alloc] init];
}
+ (RoomLeaveReqBuilder*) builderWithPrototype:(RoomLeaveReq*) prototype {
  return [[RoomLeaveReq builder] mergeFrom:prototype];
}
- (RoomLeaveReqBuilder*) builder {
  return [RoomLeaveReq builder];
}
- (RoomLeaveReqBuilder*) toBuilder {
  return [RoomLeaveReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomLeaveReq class]]) {
    return NO;
  }
  RoomLeaveReq *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomLeaveReqBuilder()
@property (strong) RoomLeaveReq* resultRoomLeaveReq;
@end

@implementation RoomLeaveReqBuilder
@synthesize resultRoomLeaveReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomLeaveReq = [[RoomLeaveReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomLeaveReq;
}
- (RoomLeaveReqBuilder*) clear {
  self.resultRoomLeaveReq = [[RoomLeaveReq alloc] init];
  return self;
}
- (RoomLeaveReqBuilder*) clone {
  return [RoomLeaveReq builderWithPrototype:resultRoomLeaveReq];
}
- (RoomLeaveReq*) defaultInstance {
  return [RoomLeaveReq defaultInstance];
}
- (RoomLeaveReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomLeaveReq*) buildPartial {
  RoomLeaveReq* returnMe = resultRoomLeaveReq;
  self.resultRoomLeaveReq = nil;
  return returnMe;
}
- (RoomLeaveReqBuilder*) mergeFrom:(RoomLeaveReq*) other {
  if (other == [RoomLeaveReq defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomLeaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomLeaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomLeaveReq.hasOwid;
}
- (SInt32) owid {
  return resultRoomLeaveReq.owid;
}
- (RoomLeaveReqBuilder*) setOwid:(SInt32) value {
  resultRoomLeaveReq.hasOwid = YES;
  resultRoomLeaveReq.owid = value;
  return self;
}
- (RoomLeaveReqBuilder*) clearOwid {
  resultRoomLeaveReq.hasOwid = NO;
  resultRoomLeaveReq.owid = 0;
  return self;
}
@end

@interface ChatUp ()
@property SInt32 type;
@property (strong) NSString* txt;
@property (strong) NSMutableArray<User*> * toUsersArray;
@property SInt32 color;
@end

@implementation ChatUp

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTxt {
  return !!hasTxt_;
}
- (void) setHasTxt:(BOOL) _value_ {
  hasTxt_ = !!_value_;
}
@synthesize txt;
@synthesize toUsersArray;
@dynamic toUsers;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.txt = @"";
    self.color = 0;
  }
  return self;
}
static ChatUp* defaultChatUpInstance = nil;
+ (void) initialize {
  if (self == [ChatUp class]) {
    defaultChatUpInstance = [[ChatUp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatUpInstance;
}
- (instancetype) defaultInstance {
  return defaultChatUpInstance;
}
- (NSArray<User*> *)toUsers {
  return toUsersArray;
}
- (User*)toUsersAtIndex:(NSUInteger)index {
  return [toUsersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasTxt) {
    return NO;
  }
  __block BOOL isInittoUsers = YES;
   [self.toUsers enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittoUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInittoUsers) return isInittoUsers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeInt32:1 value:self.type];
  }
  if (self.hasTxt) {
    [output writeString:2 value:self.txt];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeInt32Size(1, self.type);
  }
  if (self.hasTxt) {
    size_ += computeStringSize(2, self.txt);
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasColor) {
    size_ += computeInt32Size(4, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatUp*) parseFromData:(NSData*) data {
  return (ChatUp*)[[[ChatUp builder] mergeFromData:data] build];
}
+ (ChatUp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatUp*)[[[ChatUp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatUp*) parseFromInputStream:(NSInputStream*) input {
  return (ChatUp*)[[[ChatUp builder] mergeFromInputStream:input] build];
}
+ (ChatUp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatUp*)[[[ChatUp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatUp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatUp*)[[[ChatUp builder] mergeFromCodedInputStream:input] build];
}
+ (ChatUp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatUp*)[[[ChatUp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatUpBuilder*) builder {
  return [[ChatUpBuilder alloc] init];
}
+ (ChatUpBuilder*) builderWithPrototype:(ChatUp*) prototype {
  return [[ChatUp builder] mergeFrom:prototype];
}
- (ChatUpBuilder*) builder {
  return [ChatUp builder];
}
- (ChatUpBuilder*) toBuilder {
  return [ChatUp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txt", self.txt];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"toUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasTxt) {
    [dictionary setObject: self.txt forKey: @"txt"];
  }
  for (User* element in self.toUsersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"toUsers"];
  }
  if (self.hasColor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.color] forKey: @"color"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatUp class]]) {
    return NO;
  }
  ChatUp *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTxt == otherMessage.hasTxt &&
      (!self.hasTxt || [self.txt isEqual:otherMessage.txt]) &&
      [self.toUsersArray isEqualToArray:otherMessage.toUsersArray] &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasTxt) {
    hashCode = hashCode * 31 + [self.txt hash];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatUpBuilder()
@property (strong) ChatUp* resultChatUp;
@end

@implementation ChatUpBuilder
@synthesize resultChatUp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatUp = [[ChatUp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatUp;
}
- (ChatUpBuilder*) clear {
  self.resultChatUp = [[ChatUp alloc] init];
  return self;
}
- (ChatUpBuilder*) clone {
  return [ChatUp builderWithPrototype:resultChatUp];
}
- (ChatUp*) defaultInstance {
  return [ChatUp defaultInstance];
}
- (ChatUp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatUp*) buildPartial {
  ChatUp* returnMe = resultChatUp;
  self.resultChatUp = nil;
  return returnMe;
}
- (ChatUpBuilder*) mergeFrom:(ChatUp*) other {
  if (other == [ChatUp defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTxt) {
    [self setTxt:other.txt];
  }
  if (other.toUsersArray.count > 0) {
    if (resultChatUp.toUsersArray == nil) {
      resultChatUp.toUsersArray = [[NSMutableArray alloc] initWithArray:other.toUsersArray];
    } else {
      [resultChatUp.toUsersArray addObjectsFromArray:other.toUsersArray];
    }
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readInt32]];
        break;
      }
      case 18: {
        [self setTxt:[input readString]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addToUsers:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultChatUp.hasType;
}
- (SInt32) type {
  return resultChatUp.type;
}
- (ChatUpBuilder*) setType:(SInt32) value {
  resultChatUp.hasType = YES;
  resultChatUp.type = value;
  return self;
}
- (ChatUpBuilder*) clearType {
  resultChatUp.hasType = NO;
  resultChatUp.type = 0;
  return self;
}
- (BOOL) hasTxt {
  return resultChatUp.hasTxt;
}
- (NSString*) txt {
  return resultChatUp.txt;
}
- (ChatUpBuilder*) setTxt:(NSString*) value {
  resultChatUp.hasTxt = YES;
  resultChatUp.txt = value;
  return self;
}
- (ChatUpBuilder*) clearTxt {
  resultChatUp.hasTxt = NO;
  resultChatUp.txt = @"";
  return self;
}
- (NSMutableArray<User*> *)toUsers {
  return resultChatUp.toUsersArray;
}
- (User*)toUsersAtIndex:(NSUInteger)index {
  return [resultChatUp toUsersAtIndex:index];
}
- (ChatUpBuilder *)addToUsers:(User*)value {
  if (resultChatUp.toUsersArray == nil) {
    resultChatUp.toUsersArray = [[NSMutableArray alloc]init];
  }
  [resultChatUp.toUsersArray addObject:value];
  return self;
}
- (ChatUpBuilder *)setToUsersArray:(NSArray<User*> *)array {
  resultChatUp.toUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ChatUpBuilder *)clearToUsers {
  resultChatUp.toUsersArray = nil;
  return self;
}
- (BOOL) hasColor {
  return resultChatUp.hasColor;
}
- (SInt32) color {
  return resultChatUp.color;
}
- (ChatUpBuilder*) setColor:(SInt32) value {
  resultChatUp.hasColor = YES;
  resultChatUp.color = value;
  return self;
}
- (ChatUpBuilder*) clearColor {
  resultChatUp.hasColor = NO;
  resultChatUp.color = 0;
  return self;
}
@end

@interface ChatNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 type;
@property (strong) NSString* txt;
@property SInt32 color;
@property (strong) NSMutableArray<User*> * toUsersArray;
@property (strong) RetetionAttr* retetionAttr;
@end

@implementation ChatNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTxt {
  return !!hasTxt_;
}
- (void) setHasTxt:(BOOL) _value_ {
  hasTxt_ = !!_value_;
}
@synthesize txt;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
@synthesize toUsersArray;
@dynamic toUsers;
- (BOOL) hasRetetionAttr {
  return !!hasRetetionAttr_;
}
- (void) setHasRetetionAttr:(BOOL) _value_ {
  hasRetetionAttr_ = !!_value_;
}
@synthesize retetionAttr;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.type = 0;
    self.txt = @"";
    self.color = 0;
    self.retetionAttr = [RetetionAttr defaultInstance];
  }
  return self;
}
static ChatNotify* defaultChatNotifyInstance = nil;
+ (void) initialize {
  if (self == [ChatNotify class]) {
    defaultChatNotifyInstance = [[ChatNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultChatNotifyInstance;
}
- (NSArray<User*> *)toUsers {
  return toUsersArray;
}
- (User*)toUsersAtIndex:(NSUInteger)index {
  return [toUsersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasTxt) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  __block BOOL isInittoUsers = YES;
   [self.toUsers enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittoUsers = NO;
      *stop = YES;
    }
  }];
  if (!isInittoUsers) return isInittoUsers;
  if (self.hasRetetionAttr) {
    if (!self.retetionAttr.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasType) {
    [output writeInt32:4 value:self.type];
  }
  if (self.hasTxt) {
    [output writeString:5 value:self.txt];
  }
  if (self.hasColor) {
    [output writeInt32:6 value:self.color];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  if (self.hasRetetionAttr) {
    [output writeMessage:8 value:self.retetionAttr];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasType) {
    size_ += computeInt32Size(4, self.type);
  }
  if (self.hasTxt) {
    size_ += computeStringSize(5, self.txt);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(6, self.color);
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  if (self.hasRetetionAttr) {
    size_ += computeMessageSize(8, self.retetionAttr);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatNotify*) parseFromData:(NSData*) data {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromData:data] build];
}
+ (ChatNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatNotify*) parseFromInputStream:(NSInputStream*) input {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromInputStream:input] build];
}
+ (ChatNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromCodedInputStream:input] build];
}
+ (ChatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatNotify*)[[[ChatNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatNotifyBuilder*) builder {
  return [[ChatNotifyBuilder alloc] init];
}
+ (ChatNotifyBuilder*) builderWithPrototype:(ChatNotify*) prototype {
  return [[ChatNotify builder] mergeFrom:prototype];
}
- (ChatNotifyBuilder*) builder {
  return [ChatNotify builder];
}
- (ChatNotifyBuilder*) toBuilder {
  return [ChatNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txt", self.txt];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"toUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasRetetionAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"retetionAttr"];
    [self.retetionAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasTxt) {
    [dictionary setObject: self.txt forKey: @"txt"];
  }
  if (self.hasColor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.color] forKey: @"color"];
  }
  for (User* element in self.toUsersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"toUsers"];
  }
  if (self.hasRetetionAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.retetionAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"retetionAttr"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatNotify class]]) {
    return NO;
  }
  ChatNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTxt == otherMessage.hasTxt &&
      (!self.hasTxt || [self.txt isEqual:otherMessage.txt]) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      [self.toUsersArray isEqualToArray:otherMessage.toUsersArray] &&
      self.hasRetetionAttr == otherMessage.hasRetetionAttr &&
      (!self.hasRetetionAttr || [self.retetionAttr isEqual:otherMessage.retetionAttr]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasTxt) {
    hashCode = hashCode * 31 + [self.txt hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  [self.toUsersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasRetetionAttr) {
    hashCode = hashCode * 31 + [self.retetionAttr hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatNotifyBuilder()
@property (strong) ChatNotify* resultChatNotify;
@end

@implementation ChatNotifyBuilder
@synthesize resultChatNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatNotify = [[ChatNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatNotify;
}
- (ChatNotifyBuilder*) clear {
  self.resultChatNotify = [[ChatNotify alloc] init];
  return self;
}
- (ChatNotifyBuilder*) clone {
  return [ChatNotify builderWithPrototype:resultChatNotify];
}
- (ChatNotify*) defaultInstance {
  return [ChatNotify defaultInstance];
}
- (ChatNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatNotify*) buildPartial {
  ChatNotify* returnMe = resultChatNotify;
  self.resultChatNotify = nil;
  return returnMe;
}
- (ChatNotifyBuilder*) mergeFrom:(ChatNotify*) other {
  if (other == [ChatNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTxt) {
    [self setTxt:other.txt];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.toUsersArray.count > 0) {
    if (resultChatNotify.toUsersArray == nil) {
      resultChatNotify.toUsersArray = [[NSMutableArray alloc] initWithArray:other.toUsersArray];
    } else {
      [resultChatNotify.toUsersArray addObjectsFromArray:other.toUsersArray];
    }
  }
  if (other.hasRetetionAttr) {
    [self mergeRetetionAttr:other.retetionAttr];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setType:[input readInt32]];
        break;
      }
      case 42: {
        [self setTxt:[input readString]];
        break;
      }
      case 48: {
        [self setColor:[input readInt32]];
        break;
      }
      case 58: {
        UserBuilder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addToUsers:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        RetetionAttrBuilder* subBuilder = [RetetionAttr builder];
        if (self.hasRetetionAttr) {
          [subBuilder mergeFrom:self.retetionAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRetetionAttr:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultChatNotify.hasOwid;
}
- (SInt32) owid {
  return resultChatNotify.owid;
}
- (ChatNotifyBuilder*) setOwid:(SInt32) value {
  resultChatNotify.hasOwid = YES;
  resultChatNotify.owid = value;
  return self;
}
- (ChatNotifyBuilder*) clearOwid {
  resultChatNotify.hasOwid = NO;
  resultChatNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultChatNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultChatNotify.roomAttr;
}
- (ChatNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultChatNotify.hasRoomAttr = YES;
  resultChatNotify.roomAttr = value;
  return self;
}
- (ChatNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (ChatNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultChatNotify.hasRoomAttr &&
      resultChatNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultChatNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultChatNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultChatNotify.roomAttr = value;
  }
  resultChatNotify.hasRoomAttr = YES;
  return self;
}
- (ChatNotifyBuilder*) clearRoomAttr {
  resultChatNotify.hasRoomAttr = NO;
  resultChatNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultChatNotify.hasUser;
}
- (User*) user {
  return resultChatNotify.user;
}
- (ChatNotifyBuilder*) setUser:(User*) value {
  resultChatNotify.hasUser = YES;
  resultChatNotify.user = value;
  return self;
}
- (ChatNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (ChatNotifyBuilder*) mergeUser:(User*) value {
  if (resultChatNotify.hasUser &&
      resultChatNotify.user != [User defaultInstance]) {
    resultChatNotify.user =
      [[[User builderWithPrototype:resultChatNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultChatNotify.user = value;
  }
  resultChatNotify.hasUser = YES;
  return self;
}
- (ChatNotifyBuilder*) clearUser {
  resultChatNotify.hasUser = NO;
  resultChatNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasType {
  return resultChatNotify.hasType;
}
- (SInt32) type {
  return resultChatNotify.type;
}
- (ChatNotifyBuilder*) setType:(SInt32) value {
  resultChatNotify.hasType = YES;
  resultChatNotify.type = value;
  return self;
}
- (ChatNotifyBuilder*) clearType {
  resultChatNotify.hasType = NO;
  resultChatNotify.type = 0;
  return self;
}
- (BOOL) hasTxt {
  return resultChatNotify.hasTxt;
}
- (NSString*) txt {
  return resultChatNotify.txt;
}
- (ChatNotifyBuilder*) setTxt:(NSString*) value {
  resultChatNotify.hasTxt = YES;
  resultChatNotify.txt = value;
  return self;
}
- (ChatNotifyBuilder*) clearTxt {
  resultChatNotify.hasTxt = NO;
  resultChatNotify.txt = @"";
  return self;
}
- (BOOL) hasColor {
  return resultChatNotify.hasColor;
}
- (SInt32) color {
  return resultChatNotify.color;
}
- (ChatNotifyBuilder*) setColor:(SInt32) value {
  resultChatNotify.hasColor = YES;
  resultChatNotify.color = value;
  return self;
}
- (ChatNotifyBuilder*) clearColor {
  resultChatNotify.hasColor = NO;
  resultChatNotify.color = 0;
  return self;
}
- (NSMutableArray<User*> *)toUsers {
  return resultChatNotify.toUsersArray;
}
- (User*)toUsersAtIndex:(NSUInteger)index {
  return [resultChatNotify toUsersAtIndex:index];
}
- (ChatNotifyBuilder *)addToUsers:(User*)value {
  if (resultChatNotify.toUsersArray == nil) {
    resultChatNotify.toUsersArray = [[NSMutableArray alloc]init];
  }
  [resultChatNotify.toUsersArray addObject:value];
  return self;
}
- (ChatNotifyBuilder *)setToUsersArray:(NSArray<User*> *)array {
  resultChatNotify.toUsersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ChatNotifyBuilder *)clearToUsers {
  resultChatNotify.toUsersArray = nil;
  return self;
}
- (BOOL) hasRetetionAttr {
  return resultChatNotify.hasRetetionAttr;
}
- (RetetionAttr*) retetionAttr {
  return resultChatNotify.retetionAttr;
}
- (ChatNotifyBuilder*) setRetetionAttr:(RetetionAttr*) value {
  resultChatNotify.hasRetetionAttr = YES;
  resultChatNotify.retetionAttr = value;
  return self;
}
- (ChatNotifyBuilder*) setRetetionAttrBuilder:(RetetionAttrBuilder*) builderForValue {
  return [self setRetetionAttr:[builderForValue build]];
}
- (ChatNotifyBuilder*) mergeRetetionAttr:(RetetionAttr*) value {
  if (resultChatNotify.hasRetetionAttr &&
      resultChatNotify.retetionAttr != [RetetionAttr defaultInstance]) {
    resultChatNotify.retetionAttr =
      [[[RetetionAttr builderWithPrototype:resultChatNotify.retetionAttr] mergeFrom:value] buildPartial];
  } else {
    resultChatNotify.retetionAttr = value;
  }
  resultChatNotify.hasRetetionAttr = YES;
  return self;
}
- (ChatNotifyBuilder*) clearRetetionAttr {
  resultChatNotify.hasRetetionAttr = NO;
  resultChatNotify.retetionAttr = [RetetionAttr defaultInstance];
  return self;
}
@end

@interface GiftUp ()
@property SInt32 owid;
@property SInt32 gid;
@property SInt32 attrId;
@property SInt32 count;
@property (strong) NSString* txt;
@property (strong) NSString* ext;
@end

@implementation GiftUp

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasGid {
  return !!hasGid_;
}
- (void) setHasGid:(BOOL) _value_ {
  hasGid_ = !!_value_;
}
@synthesize gid;
- (BOOL) hasAttrId {
  return !!hasAttrId_;
}
- (void) setHasAttrId:(BOOL) _value_ {
  hasAttrId_ = !!_value_;
}
@synthesize attrId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasTxt {
  return !!hasTxt_;
}
- (void) setHasTxt:(BOOL) _value_ {
  hasTxt_ = !!_value_;
}
@synthesize txt;
- (BOOL) hasExt {
  return !!hasExt_;
}
- (void) setHasExt:(BOOL) _value_ {
  hasExt_ = !!_value_;
}
@synthesize ext;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.gid = 0;
    self.attrId = 0;
    self.count = 0;
    self.txt = @"";
    self.ext = @"";
  }
  return self;
}
static GiftUp* defaultGiftUpInstance = nil;
+ (void) initialize {
  if (self == [GiftUp class]) {
    defaultGiftUpInstance = [[GiftUp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGiftUpInstance;
}
- (instancetype) defaultInstance {
  return defaultGiftUpInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasGid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasGid) {
    [output writeInt32:2 value:self.gid];
  }
  if (self.hasAttrId) {
    [output writeInt32:3 value:self.attrId];
  }
  if (self.hasCount) {
    [output writeInt32:4 value:self.count];
  }
  if (self.hasTxt) {
    [output writeString:5 value:self.txt];
  }
  if (self.hasExt) {
    [output writeString:6 value:self.ext];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasGid) {
    size_ += computeInt32Size(2, self.gid);
  }
  if (self.hasAttrId) {
    size_ += computeInt32Size(3, self.attrId);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(4, self.count);
  }
  if (self.hasTxt) {
    size_ += computeStringSize(5, self.txt);
  }
  if (self.hasExt) {
    size_ += computeStringSize(6, self.ext);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GiftUp*) parseFromData:(NSData*) data {
  return (GiftUp*)[[[GiftUp builder] mergeFromData:data] build];
}
+ (GiftUp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftUp*)[[[GiftUp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GiftUp*) parseFromInputStream:(NSInputStream*) input {
  return (GiftUp*)[[[GiftUp builder] mergeFromInputStream:input] build];
}
+ (GiftUp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftUp*)[[[GiftUp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GiftUp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GiftUp*)[[[GiftUp builder] mergeFromCodedInputStream:input] build];
}
+ (GiftUp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftUp*)[[[GiftUp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GiftUpBuilder*) builder {
  return [[GiftUpBuilder alloc] init];
}
+ (GiftUpBuilder*) builderWithPrototype:(GiftUp*) prototype {
  return [[GiftUp builder] mergeFrom:prototype];
}
- (GiftUpBuilder*) builder {
  return [GiftUp builder];
}
- (GiftUpBuilder*) toBuilder {
  return [GiftUp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasGid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gid", [NSNumber numberWithInteger:self.gid]];
  }
  if (self.hasAttrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attrId", [NSNumber numberWithInteger:self.attrId]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txt", self.txt];
  }
  if (self.hasExt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ext", self.ext];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasGid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gid] forKey: @"gid"];
  }
  if (self.hasAttrId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.attrId] forKey: @"attrId"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasTxt) {
    [dictionary setObject: self.txt forKey: @"txt"];
  }
  if (self.hasExt) {
    [dictionary setObject: self.ext forKey: @"ext"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GiftUp class]]) {
    return NO;
  }
  GiftUp *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasGid == otherMessage.hasGid &&
      (!self.hasGid || self.gid == otherMessage.gid) &&
      self.hasAttrId == otherMessage.hasAttrId &&
      (!self.hasAttrId || self.attrId == otherMessage.attrId) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasTxt == otherMessage.hasTxt &&
      (!self.hasTxt || [self.txt isEqual:otherMessage.txt]) &&
      self.hasExt == otherMessage.hasExt &&
      (!self.hasExt || [self.ext isEqual:otherMessage.ext]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasGid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gid] hash];
  }
  if (self.hasAttrId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.attrId] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasTxt) {
    hashCode = hashCode * 31 + [self.txt hash];
  }
  if (self.hasExt) {
    hashCode = hashCode * 31 + [self.ext hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GiftUpBuilder()
@property (strong) GiftUp* resultGiftUp;
@end

@implementation GiftUpBuilder
@synthesize resultGiftUp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGiftUp = [[GiftUp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGiftUp;
}
- (GiftUpBuilder*) clear {
  self.resultGiftUp = [[GiftUp alloc] init];
  return self;
}
- (GiftUpBuilder*) clone {
  return [GiftUp builderWithPrototype:resultGiftUp];
}
- (GiftUp*) defaultInstance {
  return [GiftUp defaultInstance];
}
- (GiftUp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GiftUp*) buildPartial {
  GiftUp* returnMe = resultGiftUp;
  self.resultGiftUp = nil;
  return returnMe;
}
- (GiftUpBuilder*) mergeFrom:(GiftUp*) other {
  if (other == [GiftUp defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasGid) {
    [self setGid:other.gid];
  }
  if (other.hasAttrId) {
    [self setAttrId:other.attrId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasTxt) {
    [self setTxt:other.txt];
  }
  if (other.hasExt) {
    [self setExt:other.ext];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GiftUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GiftUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setGid:[input readInt32]];
        break;
      }
      case 24: {
        [self setAttrId:[input readInt32]];
        break;
      }
      case 32: {
        [self setCount:[input readInt32]];
        break;
      }
      case 42: {
        [self setTxt:[input readString]];
        break;
      }
      case 50: {
        [self setExt:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultGiftUp.hasOwid;
}
- (SInt32) owid {
  return resultGiftUp.owid;
}
- (GiftUpBuilder*) setOwid:(SInt32) value {
  resultGiftUp.hasOwid = YES;
  resultGiftUp.owid = value;
  return self;
}
- (GiftUpBuilder*) clearOwid {
  resultGiftUp.hasOwid = NO;
  resultGiftUp.owid = 0;
  return self;
}
- (BOOL) hasGid {
  return resultGiftUp.hasGid;
}
- (SInt32) gid {
  return resultGiftUp.gid;
}
- (GiftUpBuilder*) setGid:(SInt32) value {
  resultGiftUp.hasGid = YES;
  resultGiftUp.gid = value;
  return self;
}
- (GiftUpBuilder*) clearGid {
  resultGiftUp.hasGid = NO;
  resultGiftUp.gid = 0;
  return self;
}
- (BOOL) hasAttrId {
  return resultGiftUp.hasAttrId;
}
- (SInt32) attrId {
  return resultGiftUp.attrId;
}
- (GiftUpBuilder*) setAttrId:(SInt32) value {
  resultGiftUp.hasAttrId = YES;
  resultGiftUp.attrId = value;
  return self;
}
- (GiftUpBuilder*) clearAttrId {
  resultGiftUp.hasAttrId = NO;
  resultGiftUp.attrId = 0;
  return self;
}
- (BOOL) hasCount {
  return resultGiftUp.hasCount;
}
- (SInt32) count {
  return resultGiftUp.count;
}
- (GiftUpBuilder*) setCount:(SInt32) value {
  resultGiftUp.hasCount = YES;
  resultGiftUp.count = value;
  return self;
}
- (GiftUpBuilder*) clearCount {
  resultGiftUp.hasCount = NO;
  resultGiftUp.count = 0;
  return self;
}
- (BOOL) hasTxt {
  return resultGiftUp.hasTxt;
}
- (NSString*) txt {
  return resultGiftUp.txt;
}
- (GiftUpBuilder*) setTxt:(NSString*) value {
  resultGiftUp.hasTxt = YES;
  resultGiftUp.txt = value;
  return self;
}
- (GiftUpBuilder*) clearTxt {
  resultGiftUp.hasTxt = NO;
  resultGiftUp.txt = @"";
  return self;
}
- (BOOL) hasExt {
  return resultGiftUp.hasExt;
}
- (NSString*) ext {
  return resultGiftUp.ext;
}
- (GiftUpBuilder*) setExt:(NSString*) value {
  resultGiftUp.hasExt = YES;
  resultGiftUp.ext = value;
  return self;
}
- (GiftUpBuilder*) clearExt {
  resultGiftUp.hasExt = NO;
  resultGiftUp.ext = @"";
  return self;
}
@end

@interface GiftNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 combo;
@property SInt32 comboId;
@property SInt32 gid;
@property SInt32 attrId;
@property SInt32 count;
@property (strong) RetetionAttr* retetionAttr;
@end

@implementation GiftNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasCombo {
  return !!hasCombo_;
}
- (void) setHasCombo:(BOOL) _value_ {
  hasCombo_ = !!_value_;
}
@synthesize combo;
- (BOOL) hasComboId {
  return !!hasComboId_;
}
- (void) setHasComboId:(BOOL) _value_ {
  hasComboId_ = !!_value_;
}
@synthesize comboId;
- (BOOL) hasGid {
  return !!hasGid_;
}
- (void) setHasGid:(BOOL) _value_ {
  hasGid_ = !!_value_;
}
@synthesize gid;
- (BOOL) hasAttrId {
  return !!hasAttrId_;
}
- (void) setHasAttrId:(BOOL) _value_ {
  hasAttrId_ = !!_value_;
}
@synthesize attrId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasRetetionAttr {
  return !!hasRetetionAttr_;
}
- (void) setHasRetetionAttr:(BOOL) _value_ {
  hasRetetionAttr_ = !!_value_;
}
@synthesize retetionAttr;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.combo = 0;
    self.comboId = 0;
    self.gid = 0;
    self.attrId = 0;
    self.count = 0;
    self.retetionAttr = [RetetionAttr defaultInstance];
  }
  return self;
}
static GiftNotify* defaultGiftNotifyInstance = nil;
+ (void) initialize {
  if (self == [GiftNotify class]) {
    defaultGiftNotifyInstance = [[GiftNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGiftNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultGiftNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasCombo) {
    return NO;
  }
  if (!self.hasComboId) {
    return NO;
  }
  if (!self.hasGid) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  if (self.hasRetetionAttr) {
    if (!self.retetionAttr.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasCombo) {
    [output writeInt32:4 value:self.combo];
  }
  if (self.hasComboId) {
    [output writeInt32:5 value:self.comboId];
  }
  if (self.hasGid) {
    [output writeInt32:6 value:self.gid];
  }
  if (self.hasAttrId) {
    [output writeInt32:7 value:self.attrId];
  }
  if (self.hasCount) {
    [output writeInt32:8 value:self.count];
  }
  if (self.hasRetetionAttr) {
    [output writeMessage:9 value:self.retetionAttr];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasCombo) {
    size_ += computeInt32Size(4, self.combo);
  }
  if (self.hasComboId) {
    size_ += computeInt32Size(5, self.comboId);
  }
  if (self.hasGid) {
    size_ += computeInt32Size(6, self.gid);
  }
  if (self.hasAttrId) {
    size_ += computeInt32Size(7, self.attrId);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(8, self.count);
  }
  if (self.hasRetetionAttr) {
    size_ += computeMessageSize(9, self.retetionAttr);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GiftNotify*) parseFromData:(NSData*) data {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromData:data] build];
}
+ (GiftNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GiftNotify*) parseFromInputStream:(NSInputStream*) input {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromInputStream:input] build];
}
+ (GiftNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GiftNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromCodedInputStream:input] build];
}
+ (GiftNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GiftNotify*)[[[GiftNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GiftNotifyBuilder*) builder {
  return [[GiftNotifyBuilder alloc] init];
}
+ (GiftNotifyBuilder*) builderWithPrototype:(GiftNotify*) prototype {
  return [[GiftNotify builder] mergeFrom:prototype];
}
- (GiftNotifyBuilder*) builder {
  return [GiftNotify builder];
}
- (GiftNotifyBuilder*) toBuilder {
  return [GiftNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCombo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"combo", [NSNumber numberWithInteger:self.combo]];
  }
  if (self.hasComboId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comboId", [NSNumber numberWithInteger:self.comboId]];
  }
  if (self.hasGid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gid", [NSNumber numberWithInteger:self.gid]];
  }
  if (self.hasAttrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attrId", [NSNumber numberWithInteger:self.attrId]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasRetetionAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"retetionAttr"];
    [self.retetionAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasCombo) {
    [dictionary setObject: [NSNumber numberWithInteger:self.combo] forKey: @"combo"];
  }
  if (self.hasComboId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.comboId] forKey: @"comboId"];
  }
  if (self.hasGid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gid] forKey: @"gid"];
  }
  if (self.hasAttrId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.attrId] forKey: @"attrId"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasRetetionAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.retetionAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"retetionAttr"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GiftNotify class]]) {
    return NO;
  }
  GiftNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCombo == otherMessage.hasCombo &&
      (!self.hasCombo || self.combo == otherMessage.combo) &&
      self.hasComboId == otherMessage.hasComboId &&
      (!self.hasComboId || self.comboId == otherMessage.comboId) &&
      self.hasGid == otherMessage.hasGid &&
      (!self.hasGid || self.gid == otherMessage.gid) &&
      self.hasAttrId == otherMessage.hasAttrId &&
      (!self.hasAttrId || self.attrId == otherMessage.attrId) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasRetetionAttr == otherMessage.hasRetetionAttr &&
      (!self.hasRetetionAttr || [self.retetionAttr isEqual:otherMessage.retetionAttr]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCombo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.combo] hash];
  }
  if (self.hasComboId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.comboId] hash];
  }
  if (self.hasGid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gid] hash];
  }
  if (self.hasAttrId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.attrId] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasRetetionAttr) {
    hashCode = hashCode * 31 + [self.retetionAttr hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GiftNotifyBuilder()
@property (strong) GiftNotify* resultGiftNotify;
@end

@implementation GiftNotifyBuilder
@synthesize resultGiftNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGiftNotify = [[GiftNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGiftNotify;
}
- (GiftNotifyBuilder*) clear {
  self.resultGiftNotify = [[GiftNotify alloc] init];
  return self;
}
- (GiftNotifyBuilder*) clone {
  return [GiftNotify builderWithPrototype:resultGiftNotify];
}
- (GiftNotify*) defaultInstance {
  return [GiftNotify defaultInstance];
}
- (GiftNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GiftNotify*) buildPartial {
  GiftNotify* returnMe = resultGiftNotify;
  self.resultGiftNotify = nil;
  return returnMe;
}
- (GiftNotifyBuilder*) mergeFrom:(GiftNotify*) other {
  if (other == [GiftNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCombo) {
    [self setCombo:other.combo];
  }
  if (other.hasComboId) {
    [self setComboId:other.comboId];
  }
  if (other.hasGid) {
    [self setGid:other.gid];
  }
  if (other.hasAttrId) {
    [self setAttrId:other.attrId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasRetetionAttr) {
    [self mergeRetetionAttr:other.retetionAttr];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GiftNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GiftNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setCombo:[input readInt32]];
        break;
      }
      case 40: {
        [self setComboId:[input readInt32]];
        break;
      }
      case 48: {
        [self setGid:[input readInt32]];
        break;
      }
      case 56: {
        [self setAttrId:[input readInt32]];
        break;
      }
      case 64: {
        [self setCount:[input readInt32]];
        break;
      }
      case 74: {
        RetetionAttrBuilder* subBuilder = [RetetionAttr builder];
        if (self.hasRetetionAttr) {
          [subBuilder mergeFrom:self.retetionAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRetetionAttr:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultGiftNotify.hasOwid;
}
- (SInt32) owid {
  return resultGiftNotify.owid;
}
- (GiftNotifyBuilder*) setOwid:(SInt32) value {
  resultGiftNotify.hasOwid = YES;
  resultGiftNotify.owid = value;
  return self;
}
- (GiftNotifyBuilder*) clearOwid {
  resultGiftNotify.hasOwid = NO;
  resultGiftNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultGiftNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultGiftNotify.roomAttr;
}
- (GiftNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultGiftNotify.hasRoomAttr = YES;
  resultGiftNotify.roomAttr = value;
  return self;
}
- (GiftNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (GiftNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultGiftNotify.hasRoomAttr &&
      resultGiftNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultGiftNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultGiftNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultGiftNotify.roomAttr = value;
  }
  resultGiftNotify.hasRoomAttr = YES;
  return self;
}
- (GiftNotifyBuilder*) clearRoomAttr {
  resultGiftNotify.hasRoomAttr = NO;
  resultGiftNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultGiftNotify.hasUser;
}
- (User*) user {
  return resultGiftNotify.user;
}
- (GiftNotifyBuilder*) setUser:(User*) value {
  resultGiftNotify.hasUser = YES;
  resultGiftNotify.user = value;
  return self;
}
- (GiftNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (GiftNotifyBuilder*) mergeUser:(User*) value {
  if (resultGiftNotify.hasUser &&
      resultGiftNotify.user != [User defaultInstance]) {
    resultGiftNotify.user =
      [[[User builderWithPrototype:resultGiftNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultGiftNotify.user = value;
  }
  resultGiftNotify.hasUser = YES;
  return self;
}
- (GiftNotifyBuilder*) clearUser {
  resultGiftNotify.hasUser = NO;
  resultGiftNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasCombo {
  return resultGiftNotify.hasCombo;
}
- (SInt32) combo {
  return resultGiftNotify.combo;
}
- (GiftNotifyBuilder*) setCombo:(SInt32) value {
  resultGiftNotify.hasCombo = YES;
  resultGiftNotify.combo = value;
  return self;
}
- (GiftNotifyBuilder*) clearCombo {
  resultGiftNotify.hasCombo = NO;
  resultGiftNotify.combo = 0;
  return self;
}
- (BOOL) hasComboId {
  return resultGiftNotify.hasComboId;
}
- (SInt32) comboId {
  return resultGiftNotify.comboId;
}
- (GiftNotifyBuilder*) setComboId:(SInt32) value {
  resultGiftNotify.hasComboId = YES;
  resultGiftNotify.comboId = value;
  return self;
}
- (GiftNotifyBuilder*) clearComboId {
  resultGiftNotify.hasComboId = NO;
  resultGiftNotify.comboId = 0;
  return self;
}
- (BOOL) hasGid {
  return resultGiftNotify.hasGid;
}
- (SInt32) gid {
  return resultGiftNotify.gid;
}
- (GiftNotifyBuilder*) setGid:(SInt32) value {
  resultGiftNotify.hasGid = YES;
  resultGiftNotify.gid = value;
  return self;
}
- (GiftNotifyBuilder*) clearGid {
  resultGiftNotify.hasGid = NO;
  resultGiftNotify.gid = 0;
  return self;
}
- (BOOL) hasAttrId {
  return resultGiftNotify.hasAttrId;
}
- (SInt32) attrId {
  return resultGiftNotify.attrId;
}
- (GiftNotifyBuilder*) setAttrId:(SInt32) value {
  resultGiftNotify.hasAttrId = YES;
  resultGiftNotify.attrId = value;
  return self;
}
- (GiftNotifyBuilder*) clearAttrId {
  resultGiftNotify.hasAttrId = NO;
  resultGiftNotify.attrId = 0;
  return self;
}
- (BOOL) hasCount {
  return resultGiftNotify.hasCount;
}
- (SInt32) count {
  return resultGiftNotify.count;
}
- (GiftNotifyBuilder*) setCount:(SInt32) value {
  resultGiftNotify.hasCount = YES;
  resultGiftNotify.count = value;
  return self;
}
- (GiftNotifyBuilder*) clearCount {
  resultGiftNotify.hasCount = NO;
  resultGiftNotify.count = 0;
  return self;
}
- (BOOL) hasRetetionAttr {
  return resultGiftNotify.hasRetetionAttr;
}
- (RetetionAttr*) retetionAttr {
  return resultGiftNotify.retetionAttr;
}
- (GiftNotifyBuilder*) setRetetionAttr:(RetetionAttr*) value {
  resultGiftNotify.hasRetetionAttr = YES;
  resultGiftNotify.retetionAttr = value;
  return self;
}
- (GiftNotifyBuilder*) setRetetionAttrBuilder:(RetetionAttrBuilder*) builderForValue {
  return [self setRetetionAttr:[builderForValue build]];
}
- (GiftNotifyBuilder*) mergeRetetionAttr:(RetetionAttr*) value {
  if (resultGiftNotify.hasRetetionAttr &&
      resultGiftNotify.retetionAttr != [RetetionAttr defaultInstance]) {
    resultGiftNotify.retetionAttr =
      [[[RetetionAttr builderWithPrototype:resultGiftNotify.retetionAttr] mergeFrom:value] buildPartial];
  } else {
    resultGiftNotify.retetionAttr = value;
  }
  resultGiftNotify.hasRetetionAttr = YES;
  return self;
}
- (GiftNotifyBuilder*) clearRetetionAttr {
  resultGiftNotify.hasRetetionAttr = NO;
  resultGiftNotify.retetionAttr = [RetetionAttr defaultInstance];
  return self;
}
@end

@interface ZanUp ()
@property SInt32 owid;
@property SInt32 color;
@end

@implementation ZanUp

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.color = 0;
  }
  return self;
}
static ZanUp* defaultZanUpInstance = nil;
+ (void) initialize {
  if (self == [ZanUp class]) {
    defaultZanUpInstance = [[ZanUp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultZanUpInstance;
}
- (instancetype) defaultInstance {
  return defaultZanUpInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasColor) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasColor) {
    [output writeInt32:2 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(2, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ZanUp*) parseFromData:(NSData*) data {
  return (ZanUp*)[[[ZanUp builder] mergeFromData:data] build];
}
+ (ZanUp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanUp*)[[[ZanUp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ZanUp*) parseFromInputStream:(NSInputStream*) input {
  return (ZanUp*)[[[ZanUp builder] mergeFromInputStream:input] build];
}
+ (ZanUp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanUp*)[[[ZanUp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ZanUp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ZanUp*)[[[ZanUp builder] mergeFromCodedInputStream:input] build];
}
+ (ZanUp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanUp*)[[[ZanUp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ZanUpBuilder*) builder {
  return [[ZanUpBuilder alloc] init];
}
+ (ZanUpBuilder*) builderWithPrototype:(ZanUp*) prototype {
  return [[ZanUp builder] mergeFrom:prototype];
}
- (ZanUpBuilder*) builder {
  return [ZanUp builder];
}
- (ZanUpBuilder*) toBuilder {
  return [ZanUp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasColor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.color] forKey: @"color"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ZanUp class]]) {
    return NO;
  }
  ZanUp *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ZanUpBuilder()
@property (strong) ZanUp* resultZanUp;
@end

@implementation ZanUpBuilder
@synthesize resultZanUp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZanUp = [[ZanUp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZanUp;
}
- (ZanUpBuilder*) clear {
  self.resultZanUp = [[ZanUp alloc] init];
  return self;
}
- (ZanUpBuilder*) clone {
  return [ZanUp builderWithPrototype:resultZanUp];
}
- (ZanUp*) defaultInstance {
  return [ZanUp defaultInstance];
}
- (ZanUp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ZanUp*) buildPartial {
  ZanUp* returnMe = resultZanUp;
  self.resultZanUp = nil;
  return returnMe;
}
- (ZanUpBuilder*) mergeFrom:(ZanUp*) other {
  if (other == [ZanUp defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ZanUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ZanUpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultZanUp.hasOwid;
}
- (SInt32) owid {
  return resultZanUp.owid;
}
- (ZanUpBuilder*) setOwid:(SInt32) value {
  resultZanUp.hasOwid = YES;
  resultZanUp.owid = value;
  return self;
}
- (ZanUpBuilder*) clearOwid {
  resultZanUp.hasOwid = NO;
  resultZanUp.owid = 0;
  return self;
}
- (BOOL) hasColor {
  return resultZanUp.hasColor;
}
- (SInt32) color {
  return resultZanUp.color;
}
- (ZanUpBuilder*) setColor:(SInt32) value {
  resultZanUp.hasColor = YES;
  resultZanUp.color = value;
  return self;
}
- (ZanUpBuilder*) clearColor {
  resultZanUp.hasColor = NO;
  resultZanUp.color = 0;
  return self;
}
@end

@interface ZanNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 color;
@end

@implementation ZanNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.color = 0;
  }
  return self;
}
static ZanNotify* defaultZanNotifyInstance = nil;
+ (void) initialize {
  if (self == [ZanNotify class]) {
    defaultZanNotifyInstance = [[ZanNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultZanNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultZanNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasColor) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasColor) {
    [output writeInt32:4 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(4, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ZanNotify*) parseFromData:(NSData*) data {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromData:data] build];
}
+ (ZanNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ZanNotify*) parseFromInputStream:(NSInputStream*) input {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromInputStream:input] build];
}
+ (ZanNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ZanNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromCodedInputStream:input] build];
}
+ (ZanNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ZanNotify*)[[[ZanNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ZanNotifyBuilder*) builder {
  return [[ZanNotifyBuilder alloc] init];
}
+ (ZanNotifyBuilder*) builderWithPrototype:(ZanNotify*) prototype {
  return [[ZanNotify builder] mergeFrom:prototype];
}
- (ZanNotifyBuilder*) builder {
  return [ZanNotify builder];
}
- (ZanNotifyBuilder*) toBuilder {
  return [ZanNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasColor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.color] forKey: @"color"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ZanNotify class]]) {
    return NO;
  }
  ZanNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ZanNotifyBuilder()
@property (strong) ZanNotify* resultZanNotify;
@end

@implementation ZanNotifyBuilder
@synthesize resultZanNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZanNotify = [[ZanNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZanNotify;
}
- (ZanNotifyBuilder*) clear {
  self.resultZanNotify = [[ZanNotify alloc] init];
  return self;
}
- (ZanNotifyBuilder*) clone {
  return [ZanNotify builderWithPrototype:resultZanNotify];
}
- (ZanNotify*) defaultInstance {
  return [ZanNotify defaultInstance];
}
- (ZanNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ZanNotify*) buildPartial {
  ZanNotify* returnMe = resultZanNotify;
  self.resultZanNotify = nil;
  return returnMe;
}
- (ZanNotifyBuilder*) mergeFrom:(ZanNotify*) other {
  if (other == [ZanNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ZanNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ZanNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultZanNotify.hasOwid;
}
- (SInt32) owid {
  return resultZanNotify.owid;
}
- (ZanNotifyBuilder*) setOwid:(SInt32) value {
  resultZanNotify.hasOwid = YES;
  resultZanNotify.owid = value;
  return self;
}
- (ZanNotifyBuilder*) clearOwid {
  resultZanNotify.hasOwid = NO;
  resultZanNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultZanNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultZanNotify.roomAttr;
}
- (ZanNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultZanNotify.hasRoomAttr = YES;
  resultZanNotify.roomAttr = value;
  return self;
}
- (ZanNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (ZanNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultZanNotify.hasRoomAttr &&
      resultZanNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultZanNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultZanNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultZanNotify.roomAttr = value;
  }
  resultZanNotify.hasRoomAttr = YES;
  return self;
}
- (ZanNotifyBuilder*) clearRoomAttr {
  resultZanNotify.hasRoomAttr = NO;
  resultZanNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultZanNotify.hasUser;
}
- (User*) user {
  return resultZanNotify.user;
}
- (ZanNotifyBuilder*) setUser:(User*) value {
  resultZanNotify.hasUser = YES;
  resultZanNotify.user = value;
  return self;
}
- (ZanNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (ZanNotifyBuilder*) mergeUser:(User*) value {
  if (resultZanNotify.hasUser &&
      resultZanNotify.user != [User defaultInstance]) {
    resultZanNotify.user =
      [[[User builderWithPrototype:resultZanNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultZanNotify.user = value;
  }
  resultZanNotify.hasUser = YES;
  return self;
}
- (ZanNotifyBuilder*) clearUser {
  resultZanNotify.hasUser = NO;
  resultZanNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasColor {
  return resultZanNotify.hasColor;
}
- (SInt32) color {
  return resultZanNotify.color;
}
- (ZanNotifyBuilder*) setColor:(SInt32) value {
  resultZanNotify.hasColor = YES;
  resultZanNotify.color = value;
  return self;
}
- (ZanNotifyBuilder*) clearColor {
  resultZanNotify.hasColor = NO;
  resultZanNotify.color = 0;
  return self;
}
@end

@interface ManagerNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 status;
@end

@implementation ManagerNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.status = 0;
  }
  return self;
}
static ManagerNotify* defaultManagerNotifyInstance = nil;
+ (void) initialize {
  if (self == [ManagerNotify class]) {
    defaultManagerNotifyInstance = [[ManagerNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultManagerNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultManagerNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasStatus) {
    [output writeInt32:4 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(4, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ManagerNotify*) parseFromData:(NSData*) data {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromData:data] build];
}
+ (ManagerNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ManagerNotify*) parseFromInputStream:(NSInputStream*) input {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromInputStream:input] build];
}
+ (ManagerNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ManagerNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromCodedInputStream:input] build];
}
+ (ManagerNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ManagerNotify*)[[[ManagerNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ManagerNotifyBuilder*) builder {
  return [[ManagerNotifyBuilder alloc] init];
}
+ (ManagerNotifyBuilder*) builderWithPrototype:(ManagerNotify*) prototype {
  return [[ManagerNotify builder] mergeFrom:prototype];
}
- (ManagerNotifyBuilder*) builder {
  return [ManagerNotify builder];
}
- (ManagerNotifyBuilder*) toBuilder {
  return [ManagerNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ManagerNotify class]]) {
    return NO;
  }
  ManagerNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ManagerNotifyBuilder()
@property (strong) ManagerNotify* resultManagerNotify;
@end

@implementation ManagerNotifyBuilder
@synthesize resultManagerNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultManagerNotify = [[ManagerNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultManagerNotify;
}
- (ManagerNotifyBuilder*) clear {
  self.resultManagerNotify = [[ManagerNotify alloc] init];
  return self;
}
- (ManagerNotifyBuilder*) clone {
  return [ManagerNotify builderWithPrototype:resultManagerNotify];
}
- (ManagerNotify*) defaultInstance {
  return [ManagerNotify defaultInstance];
}
- (ManagerNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ManagerNotify*) buildPartial {
  ManagerNotify* returnMe = resultManagerNotify;
  self.resultManagerNotify = nil;
  return returnMe;
}
- (ManagerNotifyBuilder*) mergeFrom:(ManagerNotify*) other {
  if (other == [ManagerNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ManagerNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ManagerNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setStatus:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultManagerNotify.hasOwid;
}
- (SInt32) owid {
  return resultManagerNotify.owid;
}
- (ManagerNotifyBuilder*) setOwid:(SInt32) value {
  resultManagerNotify.hasOwid = YES;
  resultManagerNotify.owid = value;
  return self;
}
- (ManagerNotifyBuilder*) clearOwid {
  resultManagerNotify.hasOwid = NO;
  resultManagerNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultManagerNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultManagerNotify.roomAttr;
}
- (ManagerNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultManagerNotify.hasRoomAttr = YES;
  resultManagerNotify.roomAttr = value;
  return self;
}
- (ManagerNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (ManagerNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultManagerNotify.hasRoomAttr &&
      resultManagerNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultManagerNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultManagerNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultManagerNotify.roomAttr = value;
  }
  resultManagerNotify.hasRoomAttr = YES;
  return self;
}
- (ManagerNotifyBuilder*) clearRoomAttr {
  resultManagerNotify.hasRoomAttr = NO;
  resultManagerNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultManagerNotify.hasUser;
}
- (User*) user {
  return resultManagerNotify.user;
}
- (ManagerNotifyBuilder*) setUser:(User*) value {
  resultManagerNotify.hasUser = YES;
  resultManagerNotify.user = value;
  return self;
}
- (ManagerNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (ManagerNotifyBuilder*) mergeUser:(User*) value {
  if (resultManagerNotify.hasUser &&
      resultManagerNotify.user != [User defaultInstance]) {
    resultManagerNotify.user =
      [[[User builderWithPrototype:resultManagerNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultManagerNotify.user = value;
  }
  resultManagerNotify.hasUser = YES;
  return self;
}
- (ManagerNotifyBuilder*) clearUser {
  resultManagerNotify.hasUser = NO;
  resultManagerNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return resultManagerNotify.hasStatus;
}
- (SInt32) status {
  return resultManagerNotify.status;
}
- (ManagerNotifyBuilder*) setStatus:(SInt32) value {
  resultManagerNotify.hasStatus = YES;
  resultManagerNotify.status = value;
  return self;
}
- (ManagerNotifyBuilder*) clearStatus {
  resultManagerNotify.hasStatus = NO;
  resultManagerNotify.status = 0;
  return self;
}
@end

@interface RoomUpdateNotify ()
@property SInt32 owid;
@property (strong) LiveData* liveData;
@end

@implementation RoomUpdateNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasLiveData {
  return !!hasLiveData_;
}
- (void) setHasLiveData:(BOOL) _value_ {
  hasLiveData_ = !!_value_;
}
@synthesize liveData;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.liveData = [LiveData defaultInstance];
  }
  return self;
}
static RoomUpdateNotify* defaultRoomUpdateNotifyInstance = nil;
+ (void) initialize {
  if (self == [RoomUpdateNotify class]) {
    defaultRoomUpdateNotifyInstance = [[RoomUpdateNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomUpdateNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomUpdateNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasLiveData) {
    return NO;
  }
  if (!self.liveData.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasLiveData) {
    [output writeMessage:2 value:self.liveData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasLiveData) {
    size_ += computeMessageSize(2, self.liveData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomUpdateNotify*) parseFromData:(NSData*) data {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromData:data] build];
}
+ (RoomUpdateNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomUpdateNotify*) parseFromInputStream:(NSInputStream*) input {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromInputStream:input] build];
}
+ (RoomUpdateNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomUpdateNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromCodedInputStream:input] build];
}
+ (RoomUpdateNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUpdateNotify*)[[[RoomUpdateNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomUpdateNotifyBuilder*) builder {
  return [[RoomUpdateNotifyBuilder alloc] init];
}
+ (RoomUpdateNotifyBuilder*) builderWithPrototype:(RoomUpdateNotify*) prototype {
  return [[RoomUpdateNotify builder] mergeFrom:prototype];
}
- (RoomUpdateNotifyBuilder*) builder {
  return [RoomUpdateNotify builder];
}
- (RoomUpdateNotifyBuilder*) toBuilder {
  return [RoomUpdateNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasLiveData) {
    [output appendFormat:@"%@%@ {\n", indent, @"liveData"];
    [self.liveData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasLiveData) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.liveData storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"liveData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomUpdateNotify class]]) {
    return NO;
  }
  RoomUpdateNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasLiveData == otherMessage.hasLiveData &&
      (!self.hasLiveData || [self.liveData isEqual:otherMessage.liveData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasLiveData) {
    hashCode = hashCode * 31 + [self.liveData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomUpdateNotifyBuilder()
@property (strong) RoomUpdateNotify* resultRoomUpdateNotify;
@end

@implementation RoomUpdateNotifyBuilder
@synthesize resultRoomUpdateNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomUpdateNotify = [[RoomUpdateNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomUpdateNotify;
}
- (RoomUpdateNotifyBuilder*) clear {
  self.resultRoomUpdateNotify = [[RoomUpdateNotify alloc] init];
  return self;
}
- (RoomUpdateNotifyBuilder*) clone {
  return [RoomUpdateNotify builderWithPrototype:resultRoomUpdateNotify];
}
- (RoomUpdateNotify*) defaultInstance {
  return [RoomUpdateNotify defaultInstance];
}
- (RoomUpdateNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomUpdateNotify*) buildPartial {
  RoomUpdateNotify* returnMe = resultRoomUpdateNotify;
  self.resultRoomUpdateNotify = nil;
  return returnMe;
}
- (RoomUpdateNotifyBuilder*) mergeFrom:(RoomUpdateNotify*) other {
  if (other == [RoomUpdateNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasLiveData) {
    [self mergeLiveData:other.liveData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomUpdateNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomUpdateNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        LiveDataBuilder* subBuilder = [LiveData builder];
        if (self.hasLiveData) {
          [subBuilder mergeFrom:self.liveData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLiveData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRoomUpdateNotify.hasOwid;
}
- (SInt32) owid {
  return resultRoomUpdateNotify.owid;
}
- (RoomUpdateNotifyBuilder*) setOwid:(SInt32) value {
  resultRoomUpdateNotify.hasOwid = YES;
  resultRoomUpdateNotify.owid = value;
  return self;
}
- (RoomUpdateNotifyBuilder*) clearOwid {
  resultRoomUpdateNotify.hasOwid = NO;
  resultRoomUpdateNotify.owid = 0;
  return self;
}
- (BOOL) hasLiveData {
  return resultRoomUpdateNotify.hasLiveData;
}
- (LiveData*) liveData {
  return resultRoomUpdateNotify.liveData;
}
- (RoomUpdateNotifyBuilder*) setLiveData:(LiveData*) value {
  resultRoomUpdateNotify.hasLiveData = YES;
  resultRoomUpdateNotify.liveData = value;
  return self;
}
- (RoomUpdateNotifyBuilder*) setLiveDataBuilder:(LiveDataBuilder*) builderForValue {
  return [self setLiveData:[builderForValue build]];
}
- (RoomUpdateNotifyBuilder*) mergeLiveData:(LiveData*) value {
  if (resultRoomUpdateNotify.hasLiveData &&
      resultRoomUpdateNotify.liveData != [LiveData defaultInstance]) {
    resultRoomUpdateNotify.liveData =
      [[[LiveData builderWithPrototype:resultRoomUpdateNotify.liveData] mergeFrom:value] buildPartial];
  } else {
    resultRoomUpdateNotify.liveData = value;
  }
  resultRoomUpdateNotify.hasLiveData = YES;
  return self;
}
- (RoomUpdateNotifyBuilder*) clearLiveData {
  resultRoomUpdateNotify.hasLiveData = NO;
  resultRoomUpdateNotify.liveData = [LiveData defaultInstance];
  return self;
}
@end

@interface AnchorLiveStatusNotify ()
@property SInt32 owid;
@property SInt32 type;
@end

@implementation AnchorLiveStatusNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.type = 0;
  }
  return self;
}
static AnchorLiveStatusNotify* defaultAnchorLiveStatusNotifyInstance = nil;
+ (void) initialize {
  if (self == [AnchorLiveStatusNotify class]) {
    defaultAnchorLiveStatusNotifyInstance = [[AnchorLiveStatusNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAnchorLiveStatusNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultAnchorLiveStatusNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AnchorLiveStatusNotify*) parseFromData:(NSData*) data {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromData:data] build];
}
+ (AnchorLiveStatusNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AnchorLiveStatusNotify*) parseFromInputStream:(NSInputStream*) input {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromInputStream:input] build];
}
+ (AnchorLiveStatusNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnchorLiveStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromCodedInputStream:input] build];
}
+ (AnchorLiveStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnchorLiveStatusNotify*)[[[AnchorLiveStatusNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnchorLiveStatusNotifyBuilder*) builder {
  return [[AnchorLiveStatusNotifyBuilder alloc] init];
}
+ (AnchorLiveStatusNotifyBuilder*) builderWithPrototype:(AnchorLiveStatusNotify*) prototype {
  return [[AnchorLiveStatusNotify builder] mergeFrom:prototype];
}
- (AnchorLiveStatusNotifyBuilder*) builder {
  return [AnchorLiveStatusNotify builder];
}
- (AnchorLiveStatusNotifyBuilder*) toBuilder {
  return [AnchorLiveStatusNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AnchorLiveStatusNotify class]]) {
    return NO;
  }
  AnchorLiveStatusNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AnchorLiveStatusNotifyBuilder()
@property (strong) AnchorLiveStatusNotify* resultAnchorLiveStatusNotify;
@end

@implementation AnchorLiveStatusNotifyBuilder
@synthesize resultAnchorLiveStatusNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAnchorLiveStatusNotify = [[AnchorLiveStatusNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAnchorLiveStatusNotify;
}
- (AnchorLiveStatusNotifyBuilder*) clear {
  self.resultAnchorLiveStatusNotify = [[AnchorLiveStatusNotify alloc] init];
  return self;
}
- (AnchorLiveStatusNotifyBuilder*) clone {
  return [AnchorLiveStatusNotify builderWithPrototype:resultAnchorLiveStatusNotify];
}
- (AnchorLiveStatusNotify*) defaultInstance {
  return [AnchorLiveStatusNotify defaultInstance];
}
- (AnchorLiveStatusNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AnchorLiveStatusNotify*) buildPartial {
  AnchorLiveStatusNotify* returnMe = resultAnchorLiveStatusNotify;
  self.resultAnchorLiveStatusNotify = nil;
  return returnMe;
}
- (AnchorLiveStatusNotifyBuilder*) mergeFrom:(AnchorLiveStatusNotify*) other {
  if (other == [AnchorLiveStatusNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AnchorLiveStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AnchorLiveStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultAnchorLiveStatusNotify.hasOwid;
}
- (SInt32) owid {
  return resultAnchorLiveStatusNotify.owid;
}
- (AnchorLiveStatusNotifyBuilder*) setOwid:(SInt32) value {
  resultAnchorLiveStatusNotify.hasOwid = YES;
  resultAnchorLiveStatusNotify.owid = value;
  return self;
}
- (AnchorLiveStatusNotifyBuilder*) clearOwid {
  resultAnchorLiveStatusNotify.hasOwid = NO;
  resultAnchorLiveStatusNotify.owid = 0;
  return self;
}
- (BOOL) hasType {
  return resultAnchorLiveStatusNotify.hasType;
}
- (SInt32) type {
  return resultAnchorLiveStatusNotify.type;
}
- (AnchorLiveStatusNotifyBuilder*) setType:(SInt32) value {
  resultAnchorLiveStatusNotify.hasType = YES;
  resultAnchorLiveStatusNotify.type = value;
  return self;
}
- (AnchorLiveStatusNotifyBuilder*) clearType {
  resultAnchorLiveStatusNotify.hasType = NO;
  resultAnchorLiveStatusNotify.type = 0;
  return self;
}
@end

@interface SharedNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property (strong) NSString* type;
@property (strong) NSString* tips;
@end

@implementation SharedNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTips {
  return !!hasTips_;
}
- (void) setHasTips:(BOOL) _value_ {
  hasTips_ = !!_value_;
}
@synthesize tips;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.type = @"";
    self.tips = @"";
  }
  return self;
}
static SharedNotify* defaultSharedNotifyInstance = nil;
+ (void) initialize {
  if (self == [SharedNotify class]) {
    defaultSharedNotifyInstance = [[SharedNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSharedNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultSharedNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasTips) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasType) {
    [output writeString:4 value:self.type];
  }
  if (self.hasTips) {
    [output writeString:5 value:self.tips];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasType) {
    size_ += computeStringSize(4, self.type);
  }
  if (self.hasTips) {
    size_ += computeStringSize(5, self.tips);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SharedNotify*) parseFromData:(NSData*) data {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromData:data] build];
}
+ (SharedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SharedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromInputStream:input] build];
}
+ (SharedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SharedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (SharedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SharedNotify*)[[[SharedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SharedNotifyBuilder*) builder {
  return [[SharedNotifyBuilder alloc] init];
}
+ (SharedNotifyBuilder*) builderWithPrototype:(SharedNotify*) prototype {
  return [[SharedNotify builder] mergeFrom:prototype];
}
- (SharedNotifyBuilder*) builder {
  return [SharedNotify builder];
}
- (SharedNotifyBuilder*) toBuilder {
  return [SharedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasTips) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tips", self.tips];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasTips) {
    [dictionary setObject: self.tips forKey: @"tips"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SharedNotify class]]) {
    return NO;
  }
  SharedNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasTips == otherMessage.hasTips &&
      (!self.hasTips || [self.tips isEqual:otherMessage.tips]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasTips) {
    hashCode = hashCode * 31 + [self.tips hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SharedNotifyBuilder()
@property (strong) SharedNotify* resultSharedNotify;
@end

@implementation SharedNotifyBuilder
@synthesize resultSharedNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSharedNotify = [[SharedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSharedNotify;
}
- (SharedNotifyBuilder*) clear {
  self.resultSharedNotify = [[SharedNotify alloc] init];
  return self;
}
- (SharedNotifyBuilder*) clone {
  return [SharedNotify builderWithPrototype:resultSharedNotify];
}
- (SharedNotify*) defaultInstance {
  return [SharedNotify defaultInstance];
}
- (SharedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SharedNotify*) buildPartial {
  SharedNotify* returnMe = resultSharedNotify;
  self.resultSharedNotify = nil;
  return returnMe;
}
- (SharedNotifyBuilder*) mergeFrom:(SharedNotify*) other {
  if (other == [SharedNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTips) {
    [self setTips:other.tips];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SharedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SharedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setType:[input readString]];
        break;
      }
      case 42: {
        [self setTips:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultSharedNotify.hasOwid;
}
- (SInt32) owid {
  return resultSharedNotify.owid;
}
- (SharedNotifyBuilder*) setOwid:(SInt32) value {
  resultSharedNotify.hasOwid = YES;
  resultSharedNotify.owid = value;
  return self;
}
- (SharedNotifyBuilder*) clearOwid {
  resultSharedNotify.hasOwid = NO;
  resultSharedNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultSharedNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultSharedNotify.roomAttr;
}
- (SharedNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultSharedNotify.hasRoomAttr = YES;
  resultSharedNotify.roomAttr = value;
  return self;
}
- (SharedNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (SharedNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultSharedNotify.hasRoomAttr &&
      resultSharedNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultSharedNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultSharedNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultSharedNotify.roomAttr = value;
  }
  resultSharedNotify.hasRoomAttr = YES;
  return self;
}
- (SharedNotifyBuilder*) clearRoomAttr {
  resultSharedNotify.hasRoomAttr = NO;
  resultSharedNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultSharedNotify.hasUser;
}
- (User*) user {
  return resultSharedNotify.user;
}
- (SharedNotifyBuilder*) setUser:(User*) value {
  resultSharedNotify.hasUser = YES;
  resultSharedNotify.user = value;
  return self;
}
- (SharedNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (SharedNotifyBuilder*) mergeUser:(User*) value {
  if (resultSharedNotify.hasUser &&
      resultSharedNotify.user != [User defaultInstance]) {
    resultSharedNotify.user =
      [[[User builderWithPrototype:resultSharedNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultSharedNotify.user = value;
  }
  resultSharedNotify.hasUser = YES;
  return self;
}
- (SharedNotifyBuilder*) clearUser {
  resultSharedNotify.hasUser = NO;
  resultSharedNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasType {
  return resultSharedNotify.hasType;
}
- (NSString*) type {
  return resultSharedNotify.type;
}
- (SharedNotifyBuilder*) setType:(NSString*) value {
  resultSharedNotify.hasType = YES;
  resultSharedNotify.type = value;
  return self;
}
- (SharedNotifyBuilder*) clearType {
  resultSharedNotify.hasType = NO;
  resultSharedNotify.type = @"";
  return self;
}
- (BOOL) hasTips {
  return resultSharedNotify.hasTips;
}
- (NSString*) tips {
  return resultSharedNotify.tips;
}
- (SharedNotifyBuilder*) setTips:(NSString*) value {
  resultSharedNotify.hasTips = YES;
  resultSharedNotify.tips = value;
  return self;
}
- (SharedNotifyBuilder*) clearTips {
  resultSharedNotify.hasTips = NO;
  resultSharedNotify.tips = @"";
  return self;
}
@end

@interface FollowNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property (strong) NSString* tips;
@end

@implementation FollowNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasTips {
  return !!hasTips_;
}
- (void) setHasTips:(BOOL) _value_ {
  hasTips_ = !!_value_;
}
@synthesize tips;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.tips = @"";
  }
  return self;
}
static FollowNotify* defaultFollowNotifyInstance = nil;
+ (void) initialize {
  if (self == [FollowNotify class]) {
    defaultFollowNotifyInstance = [[FollowNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFollowNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultFollowNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasTips) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasTips) {
    [output writeString:4 value:self.tips];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasTips) {
    size_ += computeStringSize(4, self.tips);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FollowNotify*) parseFromData:(NSData*) data {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromData:data] build];
}
+ (FollowNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FollowNotify*) parseFromInputStream:(NSInputStream*) input {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromInputStream:input] build];
}
+ (FollowNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FollowNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromCodedInputStream:input] build];
}
+ (FollowNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FollowNotify*)[[[FollowNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FollowNotifyBuilder*) builder {
  return [[FollowNotifyBuilder alloc] init];
}
+ (FollowNotifyBuilder*) builderWithPrototype:(FollowNotify*) prototype {
  return [[FollowNotify builder] mergeFrom:prototype];
}
- (FollowNotifyBuilder*) builder {
  return [FollowNotify builder];
}
- (FollowNotifyBuilder*) toBuilder {
  return [FollowNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTips) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tips", self.tips];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasTips) {
    [dictionary setObject: self.tips forKey: @"tips"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FollowNotify class]]) {
    return NO;
  }
  FollowNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasTips == otherMessage.hasTips &&
      (!self.hasTips || [self.tips isEqual:otherMessage.tips]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasTips) {
    hashCode = hashCode * 31 + [self.tips hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FollowNotifyBuilder()
@property (strong) FollowNotify* resultFollowNotify;
@end

@implementation FollowNotifyBuilder
@synthesize resultFollowNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFollowNotify = [[FollowNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFollowNotify;
}
- (FollowNotifyBuilder*) clear {
  self.resultFollowNotify = [[FollowNotify alloc] init];
  return self;
}
- (FollowNotifyBuilder*) clone {
  return [FollowNotify builderWithPrototype:resultFollowNotify];
}
- (FollowNotify*) defaultInstance {
  return [FollowNotify defaultInstance];
}
- (FollowNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FollowNotify*) buildPartial {
  FollowNotify* returnMe = resultFollowNotify;
  self.resultFollowNotify = nil;
  return returnMe;
}
- (FollowNotifyBuilder*) mergeFrom:(FollowNotify*) other {
  if (other == [FollowNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasTips) {
    [self setTips:other.tips];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FollowNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FollowNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setTips:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultFollowNotify.hasOwid;
}
- (SInt32) owid {
  return resultFollowNotify.owid;
}
- (FollowNotifyBuilder*) setOwid:(SInt32) value {
  resultFollowNotify.hasOwid = YES;
  resultFollowNotify.owid = value;
  return self;
}
- (FollowNotifyBuilder*) clearOwid {
  resultFollowNotify.hasOwid = NO;
  resultFollowNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultFollowNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultFollowNotify.roomAttr;
}
- (FollowNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultFollowNotify.hasRoomAttr = YES;
  resultFollowNotify.roomAttr = value;
  return self;
}
- (FollowNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (FollowNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultFollowNotify.hasRoomAttr &&
      resultFollowNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultFollowNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultFollowNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultFollowNotify.roomAttr = value;
  }
  resultFollowNotify.hasRoomAttr = YES;
  return self;
}
- (FollowNotifyBuilder*) clearRoomAttr {
  resultFollowNotify.hasRoomAttr = NO;
  resultFollowNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultFollowNotify.hasUser;
}
- (User*) user {
  return resultFollowNotify.user;
}
- (FollowNotifyBuilder*) setUser:(User*) value {
  resultFollowNotify.hasUser = YES;
  resultFollowNotify.user = value;
  return self;
}
- (FollowNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (FollowNotifyBuilder*) mergeUser:(User*) value {
  if (resultFollowNotify.hasUser &&
      resultFollowNotify.user != [User defaultInstance]) {
    resultFollowNotify.user =
      [[[User builderWithPrototype:resultFollowNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultFollowNotify.user = value;
  }
  resultFollowNotify.hasUser = YES;
  return self;
}
- (FollowNotifyBuilder*) clearUser {
  resultFollowNotify.hasUser = NO;
  resultFollowNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasTips {
  return resultFollowNotify.hasTips;
}
- (NSString*) tips {
  return resultFollowNotify.tips;
}
- (FollowNotifyBuilder*) setTips:(NSString*) value {
  resultFollowNotify.hasTips = YES;
  resultFollowNotify.tips = value;
  return self;
}
- (FollowNotifyBuilder*) clearTips {
  resultFollowNotify.hasTips = NO;
  resultFollowNotify.tips = @"";
  return self;
}
@end

@interface RedEnvelopeNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 rid;
@property SInt32 type;
@property SInt32 amount;
@property (strong) NSString* txt;
@property (strong) RetetionAttr* retetionAttr;
@property UInt32 key;
@end

@implementation RedEnvelopeNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasRid {
  return !!hasRid_;
}
- (void) setHasRid:(BOOL) _value_ {
  hasRid_ = !!_value_;
}
@synthesize rid;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) _value_ {
  hasAmount_ = !!_value_;
}
@synthesize amount;
- (BOOL) hasTxt {
  return !!hasTxt_;
}
- (void) setHasTxt:(BOOL) _value_ {
  hasTxt_ = !!_value_;
}
@synthesize txt;
- (BOOL) hasRetetionAttr {
  return !!hasRetetionAttr_;
}
- (void) setHasRetetionAttr:(BOOL) _value_ {
  hasRetetionAttr_ = !!_value_;
}
@synthesize retetionAttr;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.rid = 0;
    self.type = 0;
    self.amount = 0;
    self.txt = @"";
    self.retetionAttr = [RetetionAttr defaultInstance];
    self.key = 0;
  }
  return self;
}
static RedEnvelopeNotify* defaultRedEnvelopeNotifyInstance = nil;
+ (void) initialize {
  if (self == [RedEnvelopeNotify class]) {
    defaultRedEnvelopeNotifyInstance = [[RedEnvelopeNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRedEnvelopeNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultRedEnvelopeNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasRid) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasAmount) {
    return NO;
  }
  if (!self.hasKey) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  if (self.hasRetetionAttr) {
    if (!self.retetionAttr.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasRid) {
    [output writeInt32:4 value:self.rid];
  }
  if (self.hasType) {
    [output writeInt32:5 value:self.type];
  }
  if (self.hasAmount) {
    [output writeInt32:6 value:self.amount];
  }
  if (self.hasTxt) {
    [output writeString:7 value:self.txt];
  }
  if (self.hasRetetionAttr) {
    [output writeMessage:8 value:self.retetionAttr];
  }
  if (self.hasKey) {
    [output writeUInt32:9 value:self.key];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasRid) {
    size_ += computeInt32Size(4, self.rid);
  }
  if (self.hasType) {
    size_ += computeInt32Size(5, self.type);
  }
  if (self.hasAmount) {
    size_ += computeInt32Size(6, self.amount);
  }
  if (self.hasTxt) {
    size_ += computeStringSize(7, self.txt);
  }
  if (self.hasRetetionAttr) {
    size_ += computeMessageSize(8, self.retetionAttr);
  }
  if (self.hasKey) {
    size_ += computeUInt32Size(9, self.key);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RedEnvelopeNotify*) parseFromData:(NSData*) data {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromData:data] build];
}
+ (RedEnvelopeNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RedEnvelopeNotify*) parseFromInputStream:(NSInputStream*) input {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromInputStream:input] build];
}
+ (RedEnvelopeNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RedEnvelopeNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromCodedInputStream:input] build];
}
+ (RedEnvelopeNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RedEnvelopeNotify*)[[[RedEnvelopeNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RedEnvelopeNotifyBuilder*) builder {
  return [[RedEnvelopeNotifyBuilder alloc] init];
}
+ (RedEnvelopeNotifyBuilder*) builderWithPrototype:(RedEnvelopeNotify*) prototype {
  return [[RedEnvelopeNotify builder] mergeFrom:prototype];
}
- (RedEnvelopeNotifyBuilder*) builder {
  return [RedEnvelopeNotify builder];
}
- (RedEnvelopeNotifyBuilder*) toBuilder {
  return [RedEnvelopeNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rid", [NSNumber numberWithInteger:self.rid]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amount", [NSNumber numberWithInteger:self.amount]];
  }
  if (self.hasTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txt", self.txt];
  }
  if (self.hasRetetionAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"retetionAttr"];
    [self.retetionAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", [NSNumber numberWithInteger:self.key]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasRid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rid] forKey: @"rid"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasAmount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.amount] forKey: @"amount"];
  }
  if (self.hasTxt) {
    [dictionary setObject: self.txt forKey: @"txt"];
  }
  if (self.hasRetetionAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.retetionAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"retetionAttr"];
  }
  if (self.hasKey) {
    [dictionary setObject: [NSNumber numberWithInteger:self.key] forKey: @"key"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RedEnvelopeNotify class]]) {
    return NO;
  }
  RedEnvelopeNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasRid == otherMessage.hasRid &&
      (!self.hasRid || self.rid == otherMessage.rid) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasAmount == otherMessage.hasAmount &&
      (!self.hasAmount || self.amount == otherMessage.amount) &&
      self.hasTxt == otherMessage.hasTxt &&
      (!self.hasTxt || [self.txt isEqual:otherMessage.txt]) &&
      self.hasRetetionAttr == otherMessage.hasRetetionAttr &&
      (!self.hasRetetionAttr || [self.retetionAttr isEqual:otherMessage.retetionAttr]) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || self.key == otherMessage.key) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasRid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rid] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.amount] hash];
  }
  if (self.hasTxt) {
    hashCode = hashCode * 31 + [self.txt hash];
  }
  if (self.hasRetetionAttr) {
    hashCode = hashCode * 31 + [self.retetionAttr hash];
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.key] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RedEnvelopeNotifyBuilder()
@property (strong) RedEnvelopeNotify* resultRedEnvelopeNotify;
@end

@implementation RedEnvelopeNotifyBuilder
@synthesize resultRedEnvelopeNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRedEnvelopeNotify = [[RedEnvelopeNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRedEnvelopeNotify;
}
- (RedEnvelopeNotifyBuilder*) clear {
  self.resultRedEnvelopeNotify = [[RedEnvelopeNotify alloc] init];
  return self;
}
- (RedEnvelopeNotifyBuilder*) clone {
  return [RedEnvelopeNotify builderWithPrototype:resultRedEnvelopeNotify];
}
- (RedEnvelopeNotify*) defaultInstance {
  return [RedEnvelopeNotify defaultInstance];
}
- (RedEnvelopeNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RedEnvelopeNotify*) buildPartial {
  RedEnvelopeNotify* returnMe = resultRedEnvelopeNotify;
  self.resultRedEnvelopeNotify = nil;
  return returnMe;
}
- (RedEnvelopeNotifyBuilder*) mergeFrom:(RedEnvelopeNotify*) other {
  if (other == [RedEnvelopeNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRid) {
    [self setRid:other.rid];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasTxt) {
    [self setTxt:other.txt];
  }
  if (other.hasRetetionAttr) {
    [self mergeRetetionAttr:other.retetionAttr];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RedEnvelopeNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RedEnvelopeNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setRid:[input readInt32]];
        break;
      }
      case 40: {
        [self setType:[input readInt32]];
        break;
      }
      case 48: {
        [self setAmount:[input readInt32]];
        break;
      }
      case 58: {
        [self setTxt:[input readString]];
        break;
      }
      case 66: {
        RetetionAttrBuilder* subBuilder = [RetetionAttr builder];
        if (self.hasRetetionAttr) {
          [subBuilder mergeFrom:self.retetionAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRetetionAttr:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setKey:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultRedEnvelopeNotify.hasOwid;
}
- (SInt32) owid {
  return resultRedEnvelopeNotify.owid;
}
- (RedEnvelopeNotifyBuilder*) setOwid:(SInt32) value {
  resultRedEnvelopeNotify.hasOwid = YES;
  resultRedEnvelopeNotify.owid = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearOwid {
  resultRedEnvelopeNotify.hasOwid = NO;
  resultRedEnvelopeNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultRedEnvelopeNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultRedEnvelopeNotify.roomAttr;
}
- (RedEnvelopeNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultRedEnvelopeNotify.hasRoomAttr = YES;
  resultRedEnvelopeNotify.roomAttr = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (RedEnvelopeNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultRedEnvelopeNotify.hasRoomAttr &&
      resultRedEnvelopeNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultRedEnvelopeNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultRedEnvelopeNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultRedEnvelopeNotify.roomAttr = value;
  }
  resultRedEnvelopeNotify.hasRoomAttr = YES;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearRoomAttr {
  resultRedEnvelopeNotify.hasRoomAttr = NO;
  resultRedEnvelopeNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultRedEnvelopeNotify.hasUser;
}
- (User*) user {
  return resultRedEnvelopeNotify.user;
}
- (RedEnvelopeNotifyBuilder*) setUser:(User*) value {
  resultRedEnvelopeNotify.hasUser = YES;
  resultRedEnvelopeNotify.user = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (RedEnvelopeNotifyBuilder*) mergeUser:(User*) value {
  if (resultRedEnvelopeNotify.hasUser &&
      resultRedEnvelopeNotify.user != [User defaultInstance]) {
    resultRedEnvelopeNotify.user =
      [[[User builderWithPrototype:resultRedEnvelopeNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultRedEnvelopeNotify.user = value;
  }
  resultRedEnvelopeNotify.hasUser = YES;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearUser {
  resultRedEnvelopeNotify.hasUser = NO;
  resultRedEnvelopeNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasRid {
  return resultRedEnvelopeNotify.hasRid;
}
- (SInt32) rid {
  return resultRedEnvelopeNotify.rid;
}
- (RedEnvelopeNotifyBuilder*) setRid:(SInt32) value {
  resultRedEnvelopeNotify.hasRid = YES;
  resultRedEnvelopeNotify.rid = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearRid {
  resultRedEnvelopeNotify.hasRid = NO;
  resultRedEnvelopeNotify.rid = 0;
  return self;
}
- (BOOL) hasType {
  return resultRedEnvelopeNotify.hasType;
}
- (SInt32) type {
  return resultRedEnvelopeNotify.type;
}
- (RedEnvelopeNotifyBuilder*) setType:(SInt32) value {
  resultRedEnvelopeNotify.hasType = YES;
  resultRedEnvelopeNotify.type = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearType {
  resultRedEnvelopeNotify.hasType = NO;
  resultRedEnvelopeNotify.type = 0;
  return self;
}
- (BOOL) hasAmount {
  return resultRedEnvelopeNotify.hasAmount;
}
- (SInt32) amount {
  return resultRedEnvelopeNotify.amount;
}
- (RedEnvelopeNotifyBuilder*) setAmount:(SInt32) value {
  resultRedEnvelopeNotify.hasAmount = YES;
  resultRedEnvelopeNotify.amount = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearAmount {
  resultRedEnvelopeNotify.hasAmount = NO;
  resultRedEnvelopeNotify.amount = 0;
  return self;
}
- (BOOL) hasTxt {
  return resultRedEnvelopeNotify.hasTxt;
}
- (NSString*) txt {
  return resultRedEnvelopeNotify.txt;
}
- (RedEnvelopeNotifyBuilder*) setTxt:(NSString*) value {
  resultRedEnvelopeNotify.hasTxt = YES;
  resultRedEnvelopeNotify.txt = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearTxt {
  resultRedEnvelopeNotify.hasTxt = NO;
  resultRedEnvelopeNotify.txt = @"";
  return self;
}
- (BOOL) hasRetetionAttr {
  return resultRedEnvelopeNotify.hasRetetionAttr;
}
- (RetetionAttr*) retetionAttr {
  return resultRedEnvelopeNotify.retetionAttr;
}
- (RedEnvelopeNotifyBuilder*) setRetetionAttr:(RetetionAttr*) value {
  resultRedEnvelopeNotify.hasRetetionAttr = YES;
  resultRedEnvelopeNotify.retetionAttr = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) setRetetionAttrBuilder:(RetetionAttrBuilder*) builderForValue {
  return [self setRetetionAttr:[builderForValue build]];
}
- (RedEnvelopeNotifyBuilder*) mergeRetetionAttr:(RetetionAttr*) value {
  if (resultRedEnvelopeNotify.hasRetetionAttr &&
      resultRedEnvelopeNotify.retetionAttr != [RetetionAttr defaultInstance]) {
    resultRedEnvelopeNotify.retetionAttr =
      [[[RetetionAttr builderWithPrototype:resultRedEnvelopeNotify.retetionAttr] mergeFrom:value] buildPartial];
  } else {
    resultRedEnvelopeNotify.retetionAttr = value;
  }
  resultRedEnvelopeNotify.hasRetetionAttr = YES;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearRetetionAttr {
  resultRedEnvelopeNotify.hasRetetionAttr = NO;
  resultRedEnvelopeNotify.retetionAttr = [RetetionAttr defaultInstance];
  return self;
}
- (BOOL) hasKey {
  return resultRedEnvelopeNotify.hasKey;
}
- (UInt32) key {
  return resultRedEnvelopeNotify.key;
}
- (RedEnvelopeNotifyBuilder*) setKey:(UInt32) value {
  resultRedEnvelopeNotify.hasKey = YES;
  resultRedEnvelopeNotify.key = value;
  return self;
}
- (RedEnvelopeNotifyBuilder*) clearKey {
  resultRedEnvelopeNotify.hasKey = NO;
  resultRedEnvelopeNotify.key = 0;
  return self;
}
@end

@interface UserAttrNotify ()
@property (strong) User* user;
@property SInt32 diamond;
@property SInt32 starlight;
@property SInt32 fight;
@property SInt32 seed;
@end

@implementation UserAttrNotify

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasDiamond {
  return !!hasDiamond_;
}
- (void) setHasDiamond:(BOOL) _value_ {
  hasDiamond_ = !!_value_;
}
@synthesize diamond;
- (BOOL) hasStarlight {
  return !!hasStarlight_;
}
- (void) setHasStarlight:(BOOL) _value_ {
  hasStarlight_ = !!_value_;
}
@synthesize starlight;
- (BOOL) hasFight {
  return !!hasFight_;
}
- (void) setHasFight:(BOOL) _value_ {
  hasFight_ = !!_value_;
}
@synthesize fight;
- (BOOL) hasSeed {
  return !!hasSeed_;
}
- (void) setHasSeed:(BOOL) _value_ {
  hasSeed_ = !!_value_;
}
@synthesize seed;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [User defaultInstance];
    self.diamond = 0;
    self.starlight = 0;
    self.fight = 0;
    self.seed = 0;
  }
  return self;
}
static UserAttrNotify* defaultUserAttrNotifyInstance = nil;
+ (void) initialize {
  if (self == [UserAttrNotify class]) {
    defaultUserAttrNotifyInstance = [[UserAttrNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserAttrNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultUserAttrNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasDiamond) {
    return NO;
  }
  if (!self.hasStarlight) {
    return NO;
  }
  if (!self.hasFight) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasDiamond) {
    [output writeInt32:2 value:self.diamond];
  }
  if (self.hasStarlight) {
    [output writeInt32:3 value:self.starlight];
  }
  if (self.hasFight) {
    [output writeInt32:4 value:self.fight];
  }
  if (self.hasSeed) {
    [output writeInt32:5 value:self.seed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasDiamond) {
    size_ += computeInt32Size(2, self.diamond);
  }
  if (self.hasStarlight) {
    size_ += computeInt32Size(3, self.starlight);
  }
  if (self.hasFight) {
    size_ += computeInt32Size(4, self.fight);
  }
  if (self.hasSeed) {
    size_ += computeInt32Size(5, self.seed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserAttrNotify*) parseFromData:(NSData*) data {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromData:data] build];
}
+ (UserAttrNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserAttrNotify*) parseFromInputStream:(NSInputStream*) input {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromInputStream:input] build];
}
+ (UserAttrNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttrNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromCodedInputStream:input] build];
}
+ (UserAttrNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttrNotify*)[[[UserAttrNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttrNotifyBuilder*) builder {
  return [[UserAttrNotifyBuilder alloc] init];
}
+ (UserAttrNotifyBuilder*) builderWithPrototype:(UserAttrNotify*) prototype {
  return [[UserAttrNotify builder] mergeFrom:prototype];
}
- (UserAttrNotifyBuilder*) builder {
  return [UserAttrNotify builder];
}
- (UserAttrNotifyBuilder*) toBuilder {
  return [UserAttrNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDiamond) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diamond", [NSNumber numberWithInteger:self.diamond]];
  }
  if (self.hasStarlight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"starlight", [NSNumber numberWithInteger:self.starlight]];
  }
  if (self.hasFight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fight", [NSNumber numberWithInteger:self.fight]];
  }
  if (self.hasSeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seed", [NSNumber numberWithInteger:self.seed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasDiamond) {
    [dictionary setObject: [NSNumber numberWithInteger:self.diamond] forKey: @"diamond"];
  }
  if (self.hasStarlight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.starlight] forKey: @"starlight"];
  }
  if (self.hasFight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fight] forKey: @"fight"];
  }
  if (self.hasSeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seed] forKey: @"seed"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserAttrNotify class]]) {
    return NO;
  }
  UserAttrNotify *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasDiamond == otherMessage.hasDiamond &&
      (!self.hasDiamond || self.diamond == otherMessage.diamond) &&
      self.hasStarlight == otherMessage.hasStarlight &&
      (!self.hasStarlight || self.starlight == otherMessage.starlight) &&
      self.hasFight == otherMessage.hasFight &&
      (!self.hasFight || self.fight == otherMessage.fight) &&
      self.hasSeed == otherMessage.hasSeed &&
      (!self.hasSeed || self.seed == otherMessage.seed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasDiamond) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.diamond] hash];
  }
  if (self.hasStarlight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.starlight] hash];
  }
  if (self.hasFight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fight] hash];
  }
  if (self.hasSeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserAttrNotifyBuilder()
@property (strong) UserAttrNotify* resultUserAttrNotify;
@end

@implementation UserAttrNotifyBuilder
@synthesize resultUserAttrNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserAttrNotify = [[UserAttrNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserAttrNotify;
}
- (UserAttrNotifyBuilder*) clear {
  self.resultUserAttrNotify = [[UserAttrNotify alloc] init];
  return self;
}
- (UserAttrNotifyBuilder*) clone {
  return [UserAttrNotify builderWithPrototype:resultUserAttrNotify];
}
- (UserAttrNotify*) defaultInstance {
  return [UserAttrNotify defaultInstance];
}
- (UserAttrNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserAttrNotify*) buildPartial {
  UserAttrNotify* returnMe = resultUserAttrNotify;
  self.resultUserAttrNotify = nil;
  return returnMe;
}
- (UserAttrNotifyBuilder*) mergeFrom:(UserAttrNotify*) other {
  if (other == [UserAttrNotify defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasDiamond) {
    [self setDiamond:other.diamond];
  }
  if (other.hasStarlight) {
    [self setStarlight:other.starlight];
  }
  if (other.hasFight) {
    [self setFight:other.fight];
  }
  if (other.hasSeed) {
    [self setSeed:other.seed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserAttrNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserAttrNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setDiamond:[input readInt32]];
        break;
      }
      case 24: {
        [self setStarlight:[input readInt32]];
        break;
      }
      case 32: {
        [self setFight:[input readInt32]];
        break;
      }
      case 40: {
        [self setSeed:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultUserAttrNotify.hasUser;
}
- (User*) user {
  return resultUserAttrNotify.user;
}
- (UserAttrNotifyBuilder*) setUser:(User*) value {
  resultUserAttrNotify.hasUser = YES;
  resultUserAttrNotify.user = value;
  return self;
}
- (UserAttrNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (UserAttrNotifyBuilder*) mergeUser:(User*) value {
  if (resultUserAttrNotify.hasUser &&
      resultUserAttrNotify.user != [User defaultInstance]) {
    resultUserAttrNotify.user =
      [[[User builderWithPrototype:resultUserAttrNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultUserAttrNotify.user = value;
  }
  resultUserAttrNotify.hasUser = YES;
  return self;
}
- (UserAttrNotifyBuilder*) clearUser {
  resultUserAttrNotify.hasUser = NO;
  resultUserAttrNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasDiamond {
  return resultUserAttrNotify.hasDiamond;
}
- (SInt32) diamond {
  return resultUserAttrNotify.diamond;
}
- (UserAttrNotifyBuilder*) setDiamond:(SInt32) value {
  resultUserAttrNotify.hasDiamond = YES;
  resultUserAttrNotify.diamond = value;
  return self;
}
- (UserAttrNotifyBuilder*) clearDiamond {
  resultUserAttrNotify.hasDiamond = NO;
  resultUserAttrNotify.diamond = 0;
  return self;
}
- (BOOL) hasStarlight {
  return resultUserAttrNotify.hasStarlight;
}
- (SInt32) starlight {
  return resultUserAttrNotify.starlight;
}
- (UserAttrNotifyBuilder*) setStarlight:(SInt32) value {
  resultUserAttrNotify.hasStarlight = YES;
  resultUserAttrNotify.starlight = value;
  return self;
}
- (UserAttrNotifyBuilder*) clearStarlight {
  resultUserAttrNotify.hasStarlight = NO;
  resultUserAttrNotify.starlight = 0;
  return self;
}
- (BOOL) hasFight {
  return resultUserAttrNotify.hasFight;
}
- (SInt32) fight {
  return resultUserAttrNotify.fight;
}
- (UserAttrNotifyBuilder*) setFight:(SInt32) value {
  resultUserAttrNotify.hasFight = YES;
  resultUserAttrNotify.fight = value;
  return self;
}
- (UserAttrNotifyBuilder*) clearFight {
  resultUserAttrNotify.hasFight = NO;
  resultUserAttrNotify.fight = 0;
  return self;
}
- (BOOL) hasSeed {
  return resultUserAttrNotify.hasSeed;
}
- (SInt32) seed {
  return resultUserAttrNotify.seed;
}
- (UserAttrNotifyBuilder*) setSeed:(SInt32) value {
  resultUserAttrNotify.hasSeed = YES;
  resultUserAttrNotify.seed = value;
  return self;
}
- (UserAttrNotifyBuilder*) clearSeed {
  resultUserAttrNotify.hasSeed = NO;
  resultUserAttrNotify.seed = 0;
  return self;
}
@end

@interface UserLevelUpNotify ()
@property SInt32 owid;
@property (strong) RoomAttr* roomAttr;
@property (strong) User* user;
@property SInt32 nextLevel;
@property SInt32 needDiamod;
@property SInt32 percent;
@property SInt32 type;
@property (strong) NSString* tips;
@end

@implementation UserLevelUpNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomAttr {
  return !!hasRoomAttr_;
}
- (void) setHasRoomAttr:(BOOL) _value_ {
  hasRoomAttr_ = !!_value_;
}
@synthesize roomAttr;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasNextLevel {
  return !!hasNextLevel_;
}
- (void) setHasNextLevel:(BOOL) _value_ {
  hasNextLevel_ = !!_value_;
}
@synthesize nextLevel;
- (BOOL) hasNeedDiamod {
  return !!hasNeedDiamod_;
}
- (void) setHasNeedDiamod:(BOOL) _value_ {
  hasNeedDiamod_ = !!_value_;
}
@synthesize needDiamod;
- (BOOL) hasPercent {
  return !!hasPercent_;
}
- (void) setHasPercent:(BOOL) _value_ {
  hasPercent_ = !!_value_;
}
@synthesize percent;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTips {
  return !!hasTips_;
}
- (void) setHasTips:(BOOL) _value_ {
  hasTips_ = !!_value_;
}
@synthesize tips;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomAttr = [RoomAttr defaultInstance];
    self.user = [User defaultInstance];
    self.nextLevel = 0;
    self.needDiamod = 0;
    self.percent = 0;
    self.type = 0;
    self.tips = @"";
  }
  return self;
}
static UserLevelUpNotify* defaultUserLevelUpNotifyInstance = nil;
+ (void) initialize {
  if (self == [UserLevelUpNotify class]) {
    defaultUserLevelUpNotifyInstance = [[UserLevelUpNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserLevelUpNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultUserLevelUpNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomAttr) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasNextLevel) {
    return NO;
  }
  if (!self.hasNeedDiamod) {
    return NO;
  }
  if (!self.hasPercent) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.roomAttr.isInitialized) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomAttr) {
    [output writeMessage:2 value:self.roomAttr];
  }
  if (self.hasUser) {
    [output writeMessage:3 value:self.user];
  }
  if (self.hasNextLevel) {
    [output writeInt32:4 value:self.nextLevel];
  }
  if (self.hasNeedDiamod) {
    [output writeInt32:5 value:self.needDiamod];
  }
  if (self.hasPercent) {
    [output writeInt32:6 value:self.percent];
  }
  if (self.hasType) {
    [output writeInt32:7 value:self.type];
  }
  if (self.hasTips) {
    [output writeString:8 value:self.tips];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomAttr) {
    size_ += computeMessageSize(2, self.roomAttr);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(3, self.user);
  }
  if (self.hasNextLevel) {
    size_ += computeInt32Size(4, self.nextLevel);
  }
  if (self.hasNeedDiamod) {
    size_ += computeInt32Size(5, self.needDiamod);
  }
  if (self.hasPercent) {
    size_ += computeInt32Size(6, self.percent);
  }
  if (self.hasType) {
    size_ += computeInt32Size(7, self.type);
  }
  if (self.hasTips) {
    size_ += computeStringSize(8, self.tips);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserLevelUpNotify*) parseFromData:(NSData*) data {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromData:data] build];
}
+ (UserLevelUpNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserLevelUpNotify*) parseFromInputStream:(NSInputStream*) input {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromInputStream:input] build];
}
+ (UserLevelUpNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLevelUpNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromCodedInputStream:input] build];
}
+ (UserLevelUpNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLevelUpNotify*)[[[UserLevelUpNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLevelUpNotifyBuilder*) builder {
  return [[UserLevelUpNotifyBuilder alloc] init];
}
+ (UserLevelUpNotifyBuilder*) builderWithPrototype:(UserLevelUpNotify*) prototype {
  return [[UserLevelUpNotify builder] mergeFrom:prototype];
}
- (UserLevelUpNotifyBuilder*) builder {
  return [UserLevelUpNotify builder];
}
- (UserLevelUpNotifyBuilder*) toBuilder {
  return [UserLevelUpNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomAttr"];
    [self.roomAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNextLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextLevel", [NSNumber numberWithInteger:self.nextLevel]];
  }
  if (self.hasNeedDiamod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"needDiamod", [NSNumber numberWithInteger:self.needDiamod]];
  }
  if (self.hasPercent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"percent", [NSNumber numberWithInteger:self.percent]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTips) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tips", self.tips];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomAttr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomAttr"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasNextLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nextLevel] forKey: @"nextLevel"];
  }
  if (self.hasNeedDiamod) {
    [dictionary setObject: [NSNumber numberWithInteger:self.needDiamod] forKey: @"needDiamod"];
  }
  if (self.hasPercent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.percent] forKey: @"percent"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasTips) {
    [dictionary setObject: self.tips forKey: @"tips"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserLevelUpNotify class]]) {
    return NO;
  }
  UserLevelUpNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomAttr == otherMessage.hasRoomAttr &&
      (!self.hasRoomAttr || [self.roomAttr isEqual:otherMessage.roomAttr]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasNextLevel == otherMessage.hasNextLevel &&
      (!self.hasNextLevel || self.nextLevel == otherMessage.nextLevel) &&
      self.hasNeedDiamod == otherMessage.hasNeedDiamod &&
      (!self.hasNeedDiamod || self.needDiamod == otherMessage.needDiamod) &&
      self.hasPercent == otherMessage.hasPercent &&
      (!self.hasPercent || self.percent == otherMessage.percent) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTips == otherMessage.hasTips &&
      (!self.hasTips || [self.tips isEqual:otherMessage.tips]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomAttr) {
    hashCode = hashCode * 31 + [self.roomAttr hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasNextLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nextLevel] hash];
  }
  if (self.hasNeedDiamod) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.needDiamod] hash];
  }
  if (self.hasPercent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.percent] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasTips) {
    hashCode = hashCode * 31 + [self.tips hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserLevelUpNotifyBuilder()
@property (strong) UserLevelUpNotify* resultUserLevelUpNotify;
@end

@implementation UserLevelUpNotifyBuilder
@synthesize resultUserLevelUpNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserLevelUpNotify = [[UserLevelUpNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserLevelUpNotify;
}
- (UserLevelUpNotifyBuilder*) clear {
  self.resultUserLevelUpNotify = [[UserLevelUpNotify alloc] init];
  return self;
}
- (UserLevelUpNotifyBuilder*) clone {
  return [UserLevelUpNotify builderWithPrototype:resultUserLevelUpNotify];
}
- (UserLevelUpNotify*) defaultInstance {
  return [UserLevelUpNotify defaultInstance];
}
- (UserLevelUpNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserLevelUpNotify*) buildPartial {
  UserLevelUpNotify* returnMe = resultUserLevelUpNotify;
  self.resultUserLevelUpNotify = nil;
  return returnMe;
}
- (UserLevelUpNotifyBuilder*) mergeFrom:(UserLevelUpNotify*) other {
  if (other == [UserLevelUpNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomAttr) {
    [self mergeRoomAttr:other.roomAttr];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasNextLevel) {
    [self setNextLevel:other.nextLevel];
  }
  if (other.hasNeedDiamod) {
    [self setNeedDiamod:other.needDiamod];
  }
  if (other.hasPercent) {
    [self setPercent:other.percent];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTips) {
    [self setTips:other.tips];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserLevelUpNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserLevelUpNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        RoomAttrBuilder* subBuilder = [RoomAttr builder];
        if (self.hasRoomAttr) {
          [subBuilder mergeFrom:self.roomAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomAttr:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setNextLevel:[input readInt32]];
        break;
      }
      case 40: {
        [self setNeedDiamod:[input readInt32]];
        break;
      }
      case 48: {
        [self setPercent:[input readInt32]];
        break;
      }
      case 56: {
        [self setType:[input readInt32]];
        break;
      }
      case 66: {
        [self setTips:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultUserLevelUpNotify.hasOwid;
}
- (SInt32) owid {
  return resultUserLevelUpNotify.owid;
}
- (UserLevelUpNotifyBuilder*) setOwid:(SInt32) value {
  resultUserLevelUpNotify.hasOwid = YES;
  resultUserLevelUpNotify.owid = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearOwid {
  resultUserLevelUpNotify.hasOwid = NO;
  resultUserLevelUpNotify.owid = 0;
  return self;
}
- (BOOL) hasRoomAttr {
  return resultUserLevelUpNotify.hasRoomAttr;
}
- (RoomAttr*) roomAttr {
  return resultUserLevelUpNotify.roomAttr;
}
- (UserLevelUpNotifyBuilder*) setRoomAttr:(RoomAttr*) value {
  resultUserLevelUpNotify.hasRoomAttr = YES;
  resultUserLevelUpNotify.roomAttr = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) setRoomAttrBuilder:(RoomAttrBuilder*) builderForValue {
  return [self setRoomAttr:[builderForValue build]];
}
- (UserLevelUpNotifyBuilder*) mergeRoomAttr:(RoomAttr*) value {
  if (resultUserLevelUpNotify.hasRoomAttr &&
      resultUserLevelUpNotify.roomAttr != [RoomAttr defaultInstance]) {
    resultUserLevelUpNotify.roomAttr =
      [[[RoomAttr builderWithPrototype:resultUserLevelUpNotify.roomAttr] mergeFrom:value] buildPartial];
  } else {
    resultUserLevelUpNotify.roomAttr = value;
  }
  resultUserLevelUpNotify.hasRoomAttr = YES;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearRoomAttr {
  resultUserLevelUpNotify.hasRoomAttr = NO;
  resultUserLevelUpNotify.roomAttr = [RoomAttr defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return resultUserLevelUpNotify.hasUser;
}
- (User*) user {
  return resultUserLevelUpNotify.user;
}
- (UserLevelUpNotifyBuilder*) setUser:(User*) value {
  resultUserLevelUpNotify.hasUser = YES;
  resultUserLevelUpNotify.user = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (UserLevelUpNotifyBuilder*) mergeUser:(User*) value {
  if (resultUserLevelUpNotify.hasUser &&
      resultUserLevelUpNotify.user != [User defaultInstance]) {
    resultUserLevelUpNotify.user =
      [[[User builderWithPrototype:resultUserLevelUpNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultUserLevelUpNotify.user = value;
  }
  resultUserLevelUpNotify.hasUser = YES;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearUser {
  resultUserLevelUpNotify.hasUser = NO;
  resultUserLevelUpNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasNextLevel {
  return resultUserLevelUpNotify.hasNextLevel;
}
- (SInt32) nextLevel {
  return resultUserLevelUpNotify.nextLevel;
}
- (UserLevelUpNotifyBuilder*) setNextLevel:(SInt32) value {
  resultUserLevelUpNotify.hasNextLevel = YES;
  resultUserLevelUpNotify.nextLevel = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearNextLevel {
  resultUserLevelUpNotify.hasNextLevel = NO;
  resultUserLevelUpNotify.nextLevel = 0;
  return self;
}
- (BOOL) hasNeedDiamod {
  return resultUserLevelUpNotify.hasNeedDiamod;
}
- (SInt32) needDiamod {
  return resultUserLevelUpNotify.needDiamod;
}
- (UserLevelUpNotifyBuilder*) setNeedDiamod:(SInt32) value {
  resultUserLevelUpNotify.hasNeedDiamod = YES;
  resultUserLevelUpNotify.needDiamod = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearNeedDiamod {
  resultUserLevelUpNotify.hasNeedDiamod = NO;
  resultUserLevelUpNotify.needDiamod = 0;
  return self;
}
- (BOOL) hasPercent {
  return resultUserLevelUpNotify.hasPercent;
}
- (SInt32) percent {
  return resultUserLevelUpNotify.percent;
}
- (UserLevelUpNotifyBuilder*) setPercent:(SInt32) value {
  resultUserLevelUpNotify.hasPercent = YES;
  resultUserLevelUpNotify.percent = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearPercent {
  resultUserLevelUpNotify.hasPercent = NO;
  resultUserLevelUpNotify.percent = 0;
  return self;
}
- (BOOL) hasType {
  return resultUserLevelUpNotify.hasType;
}
- (SInt32) type {
  return resultUserLevelUpNotify.type;
}
- (UserLevelUpNotifyBuilder*) setType:(SInt32) value {
  resultUserLevelUpNotify.hasType = YES;
  resultUserLevelUpNotify.type = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearType {
  resultUserLevelUpNotify.hasType = NO;
  resultUserLevelUpNotify.type = 0;
  return self;
}
- (BOOL) hasTips {
  return resultUserLevelUpNotify.hasTips;
}
- (NSString*) tips {
  return resultUserLevelUpNotify.tips;
}
- (UserLevelUpNotifyBuilder*) setTips:(NSString*) value {
  resultUserLevelUpNotify.hasTips = YES;
  resultUserLevelUpNotify.tips = value;
  return self;
}
- (UserLevelUpNotifyBuilder*) clearTips {
  resultUserLevelUpNotify.hasTips = NO;
  resultUserLevelUpNotify.tips = @"";
  return self;
}
@end

@interface KickoutNotify ()
@property SInt32 owid;
@property (strong) NSString* msg;
@end

@implementation KickoutNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.msg = @"";
  }
  return self;
}
static KickoutNotify* defaultKickoutNotifyInstance = nil;
+ (void) initialize {
  if (self == [KickoutNotify class]) {
    defaultKickoutNotifyInstance = [[KickoutNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultKickoutNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultKickoutNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (KickoutNotify*) parseFromData:(NSData*) data {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromData:data] build];
}
+ (KickoutNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromInputStream:input] build];
}
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromCodedInputStream:input] build];
}
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotifyBuilder*) builder {
  return [[KickoutNotifyBuilder alloc] init];
}
+ (KickoutNotifyBuilder*) builderWithPrototype:(KickoutNotify*) prototype {
  return [[KickoutNotify builder] mergeFrom:prototype];
}
- (KickoutNotifyBuilder*) builder {
  return [KickoutNotify builder];
}
- (KickoutNotifyBuilder*) toBuilder {
  return [KickoutNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KickoutNotify class]]) {
    return NO;
  }
  KickoutNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KickoutNotifyBuilder()
@property (strong) KickoutNotify* resultKickoutNotify;
@end

@implementation KickoutNotifyBuilder
@synthesize resultKickoutNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultKickoutNotify = [[KickoutNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultKickoutNotify;
}
- (KickoutNotifyBuilder*) clear {
  self.resultKickoutNotify = [[KickoutNotify alloc] init];
  return self;
}
- (KickoutNotifyBuilder*) clone {
  return [KickoutNotify builderWithPrototype:resultKickoutNotify];
}
- (KickoutNotify*) defaultInstance {
  return [KickoutNotify defaultInstance];
}
- (KickoutNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KickoutNotify*) buildPartial {
  KickoutNotify* returnMe = resultKickoutNotify;
  self.resultKickoutNotify = nil;
  return returnMe;
}
- (KickoutNotifyBuilder*) mergeFrom:(KickoutNotify*) other {
  if (other == [KickoutNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultKickoutNotify.hasOwid;
}
- (SInt32) owid {
  return resultKickoutNotify.owid;
}
- (KickoutNotifyBuilder*) setOwid:(SInt32) value {
  resultKickoutNotify.hasOwid = YES;
  resultKickoutNotify.owid = value;
  return self;
}
- (KickoutNotifyBuilder*) clearOwid {
  resultKickoutNotify.hasOwid = NO;
  resultKickoutNotify.owid = 0;
  return self;
}
- (BOOL) hasMsg {
  return resultKickoutNotify.hasMsg;
}
- (NSString*) msg {
  return resultKickoutNotify.msg;
}
- (KickoutNotifyBuilder*) setMsg:(NSString*) value {
  resultKickoutNotify.hasMsg = YES;
  resultKickoutNotify.msg = value;
  return self;
}
- (KickoutNotifyBuilder*) clearMsg {
  resultKickoutNotify.hasMsg = NO;
  resultKickoutNotify.msg = @"";
  return self;
}
@end

@interface LinkApply ()
@property SInt32 owid;
@property SInt32 uid;
@property SInt32 applyCount;
@end

@implementation LinkApply

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasApplyCount {
  return !!hasApplyCount_;
}
- (void) setHasApplyCount:(BOOL) _value_ {
  hasApplyCount_ = !!_value_;
}
@synthesize applyCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.uid = 0;
    self.applyCount = 0;
  }
  return self;
}
static LinkApply* defaultLinkApplyInstance = nil;
+ (void) initialize {
  if (self == [LinkApply class]) {
    defaultLinkApplyInstance = [[LinkApply alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkApplyInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkApplyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasApplyCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasUid) {
    [output writeInt32:2 value:self.uid];
  }
  if (self.hasApplyCount) {
    [output writeInt32:3 value:self.applyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasUid) {
    size_ += computeInt32Size(2, self.uid);
  }
  if (self.hasApplyCount) {
    size_ += computeInt32Size(3, self.applyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkApply*) parseFromData:(NSData*) data {
  return (LinkApply*)[[[LinkApply builder] mergeFromData:data] build];
}
+ (LinkApply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApply*)[[[LinkApply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkApply*) parseFromInputStream:(NSInputStream*) input {
  return (LinkApply*)[[[LinkApply builder] mergeFromInputStream:input] build];
}
+ (LinkApply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApply*)[[[LinkApply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkApply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkApply*)[[[LinkApply builder] mergeFromCodedInputStream:input] build];
}
+ (LinkApply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApply*)[[[LinkApply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkApplyBuilder*) builder {
  return [[LinkApplyBuilder alloc] init];
}
+ (LinkApplyBuilder*) builderWithPrototype:(LinkApply*) prototype {
  return [[LinkApply builder] mergeFrom:prototype];
}
- (LinkApplyBuilder*) builder {
  return [LinkApply builder];
}
- (LinkApplyBuilder*) toBuilder {
  return [LinkApply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithInteger:self.applyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasApplyCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.applyCount] forKey: @"applyCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkApply class]]) {
    return NO;
  }
  LinkApply *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasApplyCount == otherMessage.hasApplyCount &&
      (!self.hasApplyCount || self.applyCount == otherMessage.applyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasApplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkApplyBuilder()
@property (strong) LinkApply* resultLinkApply;
@end

@implementation LinkApplyBuilder
@synthesize resultLinkApply;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkApply = [[LinkApply alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkApply;
}
- (LinkApplyBuilder*) clear {
  self.resultLinkApply = [[LinkApply alloc] init];
  return self;
}
- (LinkApplyBuilder*) clone {
  return [LinkApply builderWithPrototype:resultLinkApply];
}
- (LinkApply*) defaultInstance {
  return [LinkApply defaultInstance];
}
- (LinkApply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkApply*) buildPartial {
  LinkApply* returnMe = resultLinkApply;
  self.resultLinkApply = nil;
  return returnMe;
}
- (LinkApplyBuilder*) mergeFrom:(LinkApply*) other {
  if (other == [LinkApply defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasApplyCount) {
    [self setApplyCount:other.applyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkApplyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkApplyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readInt32]];
        break;
      }
      case 24: {
        [self setApplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkApply.hasOwid;
}
- (SInt32) owid {
  return resultLinkApply.owid;
}
- (LinkApplyBuilder*) setOwid:(SInt32) value {
  resultLinkApply.hasOwid = YES;
  resultLinkApply.owid = value;
  return self;
}
- (LinkApplyBuilder*) clearOwid {
  resultLinkApply.hasOwid = NO;
  resultLinkApply.owid = 0;
  return self;
}
- (BOOL) hasUid {
  return resultLinkApply.hasUid;
}
- (SInt32) uid {
  return resultLinkApply.uid;
}
- (LinkApplyBuilder*) setUid:(SInt32) value {
  resultLinkApply.hasUid = YES;
  resultLinkApply.uid = value;
  return self;
}
- (LinkApplyBuilder*) clearUid {
  resultLinkApply.hasUid = NO;
  resultLinkApply.uid = 0;
  return self;
}
- (BOOL) hasApplyCount {
  return resultLinkApply.hasApplyCount;
}
- (SInt32) applyCount {
  return resultLinkApply.applyCount;
}
- (LinkApplyBuilder*) setApplyCount:(SInt32) value {
  resultLinkApply.hasApplyCount = YES;
  resultLinkApply.applyCount = value;
  return self;
}
- (LinkApplyBuilder*) clearApplyCount {
  resultLinkApply.hasApplyCount = NO;
  resultLinkApply.applyCount = 0;
  return self;
}
@end

@interface LinkCancel ()
@property SInt32 owid;
@property SInt32 uid;
@property SInt32 applyCount;
@end

@implementation LinkCancel

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasApplyCount {
  return !!hasApplyCount_;
}
- (void) setHasApplyCount:(BOOL) _value_ {
  hasApplyCount_ = !!_value_;
}
@synthesize applyCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.uid = 0;
    self.applyCount = 0;
  }
  return self;
}
static LinkCancel* defaultLinkCancelInstance = nil;
+ (void) initialize {
  if (self == [LinkCancel class]) {
    defaultLinkCancelInstance = [[LinkCancel alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkCancelInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkCancelInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasApplyCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasUid) {
    [output writeInt32:2 value:self.uid];
  }
  if (self.hasApplyCount) {
    [output writeInt32:3 value:self.applyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasUid) {
    size_ += computeInt32Size(2, self.uid);
  }
  if (self.hasApplyCount) {
    size_ += computeInt32Size(3, self.applyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkCancel*) parseFromData:(NSData*) data {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromData:data] build];
}
+ (LinkCancel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkCancel*) parseFromInputStream:(NSInputStream*) input {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromInputStream:input] build];
}
+ (LinkCancel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkCancel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromCodedInputStream:input] build];
}
+ (LinkCancel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkCancel*)[[[LinkCancel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkCancelBuilder*) builder {
  return [[LinkCancelBuilder alloc] init];
}
+ (LinkCancelBuilder*) builderWithPrototype:(LinkCancel*) prototype {
  return [[LinkCancel builder] mergeFrom:prototype];
}
- (LinkCancelBuilder*) builder {
  return [LinkCancel builder];
}
- (LinkCancelBuilder*) toBuilder {
  return [LinkCancel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithInteger:self.applyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasApplyCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.applyCount] forKey: @"applyCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkCancel class]]) {
    return NO;
  }
  LinkCancel *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasApplyCount == otherMessage.hasApplyCount &&
      (!self.hasApplyCount || self.applyCount == otherMessage.applyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasApplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkCancelBuilder()
@property (strong) LinkCancel* resultLinkCancel;
@end

@implementation LinkCancelBuilder
@synthesize resultLinkCancel;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkCancel = [[LinkCancel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkCancel;
}
- (LinkCancelBuilder*) clear {
  self.resultLinkCancel = [[LinkCancel alloc] init];
  return self;
}
- (LinkCancelBuilder*) clone {
  return [LinkCancel builderWithPrototype:resultLinkCancel];
}
- (LinkCancel*) defaultInstance {
  return [LinkCancel defaultInstance];
}
- (LinkCancel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkCancel*) buildPartial {
  LinkCancel* returnMe = resultLinkCancel;
  self.resultLinkCancel = nil;
  return returnMe;
}
- (LinkCancelBuilder*) mergeFrom:(LinkCancel*) other {
  if (other == [LinkCancel defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasApplyCount) {
    [self setApplyCount:other.applyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkCancelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkCancelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readInt32]];
        break;
      }
      case 24: {
        [self setApplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkCancel.hasOwid;
}
- (SInt32) owid {
  return resultLinkCancel.owid;
}
- (LinkCancelBuilder*) setOwid:(SInt32) value {
  resultLinkCancel.hasOwid = YES;
  resultLinkCancel.owid = value;
  return self;
}
- (LinkCancelBuilder*) clearOwid {
  resultLinkCancel.hasOwid = NO;
  resultLinkCancel.owid = 0;
  return self;
}
- (BOOL) hasUid {
  return resultLinkCancel.hasUid;
}
- (SInt32) uid {
  return resultLinkCancel.uid;
}
- (LinkCancelBuilder*) setUid:(SInt32) value {
  resultLinkCancel.hasUid = YES;
  resultLinkCancel.uid = value;
  return self;
}
- (LinkCancelBuilder*) clearUid {
  resultLinkCancel.hasUid = NO;
  resultLinkCancel.uid = 0;
  return self;
}
- (BOOL) hasApplyCount {
  return resultLinkCancel.hasApplyCount;
}
- (SInt32) applyCount {
  return resultLinkCancel.applyCount;
}
- (LinkCancelBuilder*) setApplyCount:(SInt32) value {
  resultLinkCancel.hasApplyCount = YES;
  resultLinkCancel.applyCount = value;
  return self;
}
- (LinkCancelBuilder*) clearApplyCount {
  resultLinkCancel.hasApplyCount = NO;
  resultLinkCancel.applyCount = 0;
  return self;
}
@end

@interface LinkClose ()
@property SInt32 owid;
@property SInt32 applyCount;
@end

@implementation LinkClose

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasApplyCount {
  return !!hasApplyCount_;
}
- (void) setHasApplyCount:(BOOL) _value_ {
  hasApplyCount_ = !!_value_;
}
@synthesize applyCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.applyCount = 0;
  }
  return self;
}
static LinkClose* defaultLinkCloseInstance = nil;
+ (void) initialize {
  if (self == [LinkClose class]) {
    defaultLinkCloseInstance = [[LinkClose alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkCloseInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkCloseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasApplyCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasApplyCount) {
    [output writeInt32:2 value:self.applyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasApplyCount) {
    size_ += computeInt32Size(2, self.applyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkClose*) parseFromData:(NSData*) data {
  return (LinkClose*)[[[LinkClose builder] mergeFromData:data] build];
}
+ (LinkClose*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkClose*)[[[LinkClose builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkClose*) parseFromInputStream:(NSInputStream*) input {
  return (LinkClose*)[[[LinkClose builder] mergeFromInputStream:input] build];
}
+ (LinkClose*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkClose*)[[[LinkClose builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkClose*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkClose*)[[[LinkClose builder] mergeFromCodedInputStream:input] build];
}
+ (LinkClose*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkClose*)[[[LinkClose builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkCloseBuilder*) builder {
  return [[LinkCloseBuilder alloc] init];
}
+ (LinkCloseBuilder*) builderWithPrototype:(LinkClose*) prototype {
  return [[LinkClose builder] mergeFrom:prototype];
}
- (LinkCloseBuilder*) builder {
  return [LinkClose builder];
}
- (LinkCloseBuilder*) toBuilder {
  return [LinkClose builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithInteger:self.applyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasApplyCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.applyCount] forKey: @"applyCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkClose class]]) {
    return NO;
  }
  LinkClose *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasApplyCount == otherMessage.hasApplyCount &&
      (!self.hasApplyCount || self.applyCount == otherMessage.applyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasApplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkCloseBuilder()
@property (strong) LinkClose* resultLinkClose;
@end

@implementation LinkCloseBuilder
@synthesize resultLinkClose;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkClose = [[LinkClose alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkClose;
}
- (LinkCloseBuilder*) clear {
  self.resultLinkClose = [[LinkClose alloc] init];
  return self;
}
- (LinkCloseBuilder*) clone {
  return [LinkClose builderWithPrototype:resultLinkClose];
}
- (LinkClose*) defaultInstance {
  return [LinkClose defaultInstance];
}
- (LinkClose*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkClose*) buildPartial {
  LinkClose* returnMe = resultLinkClose;
  self.resultLinkClose = nil;
  return returnMe;
}
- (LinkCloseBuilder*) mergeFrom:(LinkClose*) other {
  if (other == [LinkClose defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasApplyCount) {
    [self setApplyCount:other.applyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkCloseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkCloseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setApplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkClose.hasOwid;
}
- (SInt32) owid {
  return resultLinkClose.owid;
}
- (LinkCloseBuilder*) setOwid:(SInt32) value {
  resultLinkClose.hasOwid = YES;
  resultLinkClose.owid = value;
  return self;
}
- (LinkCloseBuilder*) clearOwid {
  resultLinkClose.hasOwid = NO;
  resultLinkClose.owid = 0;
  return self;
}
- (BOOL) hasApplyCount {
  return resultLinkClose.hasApplyCount;
}
- (SInt32) applyCount {
  return resultLinkClose.applyCount;
}
- (LinkCloseBuilder*) setApplyCount:(SInt32) value {
  resultLinkClose.hasApplyCount = YES;
  resultLinkClose.applyCount = value;
  return self;
}
- (LinkCloseBuilder*) clearApplyCount {
  resultLinkClose.hasApplyCount = NO;
  resultLinkClose.applyCount = 0;
  return self;
}
@end

@interface LinkApplyCountChg ()
@property SInt32 owid;
@property SInt32 applyCount;
@end

@implementation LinkApplyCountChg

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasApplyCount {
  return !!hasApplyCount_;
}
- (void) setHasApplyCount:(BOOL) _value_ {
  hasApplyCount_ = !!_value_;
}
@synthesize applyCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.applyCount = 0;
  }
  return self;
}
static LinkApplyCountChg* defaultLinkApplyCountChgInstance = nil;
+ (void) initialize {
  if (self == [LinkApplyCountChg class]) {
    defaultLinkApplyCountChgInstance = [[LinkApplyCountChg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkApplyCountChgInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkApplyCountChgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasApplyCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasApplyCount) {
    [output writeInt32:2 value:self.applyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasApplyCount) {
    size_ += computeInt32Size(2, self.applyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkApplyCountChg*) parseFromData:(NSData*) data {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromData:data] build];
}
+ (LinkApplyCountChg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkApplyCountChg*) parseFromInputStream:(NSInputStream*) input {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromInputStream:input] build];
}
+ (LinkApplyCountChg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkApplyCountChg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromCodedInputStream:input] build];
}
+ (LinkApplyCountChg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkApplyCountChg*)[[[LinkApplyCountChg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkApplyCountChgBuilder*) builder {
  return [[LinkApplyCountChgBuilder alloc] init];
}
+ (LinkApplyCountChgBuilder*) builderWithPrototype:(LinkApplyCountChg*) prototype {
  return [[LinkApplyCountChg builder] mergeFrom:prototype];
}
- (LinkApplyCountChgBuilder*) builder {
  return [LinkApplyCountChg builder];
}
- (LinkApplyCountChgBuilder*) toBuilder {
  return [LinkApplyCountChg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithInteger:self.applyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasApplyCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.applyCount] forKey: @"applyCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkApplyCountChg class]]) {
    return NO;
  }
  LinkApplyCountChg *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasApplyCount == otherMessage.hasApplyCount &&
      (!self.hasApplyCount || self.applyCount == otherMessage.applyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasApplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.applyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkApplyCountChgBuilder()
@property (strong) LinkApplyCountChg* resultLinkApplyCountChg;
@end

@implementation LinkApplyCountChgBuilder
@synthesize resultLinkApplyCountChg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkApplyCountChg = [[LinkApplyCountChg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkApplyCountChg;
}
- (LinkApplyCountChgBuilder*) clear {
  self.resultLinkApplyCountChg = [[LinkApplyCountChg alloc] init];
  return self;
}
- (LinkApplyCountChgBuilder*) clone {
  return [LinkApplyCountChg builderWithPrototype:resultLinkApplyCountChg];
}
- (LinkApplyCountChg*) defaultInstance {
  return [LinkApplyCountChg defaultInstance];
}
- (LinkApplyCountChg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkApplyCountChg*) buildPartial {
  LinkApplyCountChg* returnMe = resultLinkApplyCountChg;
  self.resultLinkApplyCountChg = nil;
  return returnMe;
}
- (LinkApplyCountChgBuilder*) mergeFrom:(LinkApplyCountChg*) other {
  if (other == [LinkApplyCountChg defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasApplyCount) {
    [self setApplyCount:other.applyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkApplyCountChgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkApplyCountChgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setApplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkApplyCountChg.hasOwid;
}
- (SInt32) owid {
  return resultLinkApplyCountChg.owid;
}
- (LinkApplyCountChgBuilder*) setOwid:(SInt32) value {
  resultLinkApplyCountChg.hasOwid = YES;
  resultLinkApplyCountChg.owid = value;
  return self;
}
- (LinkApplyCountChgBuilder*) clearOwid {
  resultLinkApplyCountChg.hasOwid = NO;
  resultLinkApplyCountChg.owid = 0;
  return self;
}
- (BOOL) hasApplyCount {
  return resultLinkApplyCountChg.hasApplyCount;
}
- (SInt32) applyCount {
  return resultLinkApplyCountChg.applyCount;
}
- (LinkApplyCountChgBuilder*) setApplyCount:(SInt32) value {
  resultLinkApplyCountChg.hasApplyCount = YES;
  resultLinkApplyCountChg.applyCount = value;
  return self;
}
- (LinkApplyCountChgBuilder*) clearApplyCount {
  resultLinkApplyCountChg.hasApplyCount = NO;
  resultLinkApplyCountChg.applyCount = 0;
  return self;
}
@end

@interface LinkAccept ()
@property SInt32 owid;
@property (strong) NSString* roomName;
@property (strong) NSString* token;
@end

@implementation LinkAccept

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) _value_ {
  hasRoomName_ = !!_value_;
}
@synthesize roomName;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.roomName = @"";
    self.token = @"";
  }
  return self;
}
static LinkAccept* defaultLinkAcceptInstance = nil;
+ (void) initialize {
  if (self == [LinkAccept class]) {
    defaultLinkAcceptInstance = [[LinkAccept alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkAcceptInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkAcceptInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasRoomName) {
    return NO;
  }
  if (!self.hasToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasRoomName) {
    [output writeString:2 value:self.roomName];
  }
  if (self.hasToken) {
    [output writeString:3 value:self.token];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasRoomName) {
    size_ += computeStringSize(2, self.roomName);
  }
  if (self.hasToken) {
    size_ += computeStringSize(3, self.token);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkAccept*) parseFromData:(NSData*) data {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromData:data] build];
}
+ (LinkAccept*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkAccept*) parseFromInputStream:(NSInputStream*) input {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromInputStream:input] build];
}
+ (LinkAccept*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkAccept*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromCodedInputStream:input] build];
}
+ (LinkAccept*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkAccept*)[[[LinkAccept builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkAcceptBuilder*) builder {
  return [[LinkAcceptBuilder alloc] init];
}
+ (LinkAcceptBuilder*) builderWithPrototype:(LinkAccept*) prototype {
  return [[LinkAccept builder] mergeFrom:prototype];
}
- (LinkAcceptBuilder*) builder {
  return [LinkAccept builder];
}
- (LinkAcceptBuilder*) toBuilder {
  return [LinkAccept builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasRoomName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomName", self.roomName];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasRoomName) {
    [dictionary setObject: self.roomName forKey: @"roomName"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkAccept class]]) {
    return NO;
  }
  LinkAccept *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasRoomName == otherMessage.hasRoomName &&
      (!self.hasRoomName || [self.roomName isEqual:otherMessage.roomName]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasRoomName) {
    hashCode = hashCode * 31 + [self.roomName hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkAcceptBuilder()
@property (strong) LinkAccept* resultLinkAccept;
@end

@implementation LinkAcceptBuilder
@synthesize resultLinkAccept;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkAccept = [[LinkAccept alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkAccept;
}
- (LinkAcceptBuilder*) clear {
  self.resultLinkAccept = [[LinkAccept alloc] init];
  return self;
}
- (LinkAcceptBuilder*) clone {
  return [LinkAccept builderWithPrototype:resultLinkAccept];
}
- (LinkAccept*) defaultInstance {
  return [LinkAccept defaultInstance];
}
- (LinkAccept*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkAccept*) buildPartial {
  LinkAccept* returnMe = resultLinkAccept;
  self.resultLinkAccept = nil;
  return returnMe;
}
- (LinkAcceptBuilder*) mergeFrom:(LinkAccept*) other {
  if (other == [LinkAccept defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkAcceptBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkAcceptBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        [self setRoomName:[input readString]];
        break;
      }
      case 26: {
        [self setToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkAccept.hasOwid;
}
- (SInt32) owid {
  return resultLinkAccept.owid;
}
- (LinkAcceptBuilder*) setOwid:(SInt32) value {
  resultLinkAccept.hasOwid = YES;
  resultLinkAccept.owid = value;
  return self;
}
- (LinkAcceptBuilder*) clearOwid {
  resultLinkAccept.hasOwid = NO;
  resultLinkAccept.owid = 0;
  return self;
}
- (BOOL) hasRoomName {
  return resultLinkAccept.hasRoomName;
}
- (NSString*) roomName {
  return resultLinkAccept.roomName;
}
- (LinkAcceptBuilder*) setRoomName:(NSString*) value {
  resultLinkAccept.hasRoomName = YES;
  resultLinkAccept.roomName = value;
  return self;
}
- (LinkAcceptBuilder*) clearRoomName {
  resultLinkAccept.hasRoomName = NO;
  resultLinkAccept.roomName = @"";
  return self;
}
- (BOOL) hasToken {
  return resultLinkAccept.hasToken;
}
- (NSString*) token {
  return resultLinkAccept.token;
}
- (LinkAcceptBuilder*) setToken:(NSString*) value {
  resultLinkAccept.hasToken = YES;
  resultLinkAccept.token = value;
  return self;
}
- (LinkAcceptBuilder*) clearToken {
  resultLinkAccept.hasToken = NO;
  resultLinkAccept.token = @"";
  return self;
}
@end

@interface LinkBroadcast ()
@property SInt32 owid;
@property SInt32 status;
@property (strong) NSMutableArray<User*> * linkersArray;
@end

@implementation LinkBroadcast

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize linkersArray;
@dynamic linkers;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.status = 0;
  }
  return self;
}
static LinkBroadcast* defaultLinkBroadcastInstance = nil;
+ (void) initialize {
  if (self == [LinkBroadcast class]) {
    defaultLinkBroadcastInstance = [[LinkBroadcast alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkBroadcastInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkBroadcastInstance;
}
- (NSArray<User*> *)linkers {
  return linkersArray;
}
- (User*)linkersAtIndex:(NSUInteger)index {
  return [linkersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  __block BOOL isInitlinkers = YES;
   [self.linkers enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlinkers = NO;
      *stop = YES;
    }
  }];
  if (!isInitlinkers) return isInitlinkers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  [self.linkersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(2, self.status);
  }
  [self.linkersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkBroadcast*) parseFromData:(NSData*) data {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromData:data] build];
}
+ (LinkBroadcast*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkBroadcast*) parseFromInputStream:(NSInputStream*) input {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromInputStream:input] build];
}
+ (LinkBroadcast*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkBroadcast*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromCodedInputStream:input] build];
}
+ (LinkBroadcast*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkBroadcast*)[[[LinkBroadcast builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkBroadcastBuilder*) builder {
  return [[LinkBroadcastBuilder alloc] init];
}
+ (LinkBroadcastBuilder*) builderWithPrototype:(LinkBroadcast*) prototype {
  return [[LinkBroadcast builder] mergeFrom:prototype];
}
- (LinkBroadcastBuilder*) builder {
  return [LinkBroadcast builder];
}
- (LinkBroadcastBuilder*) toBuilder {
  return [LinkBroadcast builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.linkersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"linkers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  for (User* element in self.linkersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"linkers"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkBroadcast class]]) {
    return NO;
  }
  LinkBroadcast *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.linkersArray isEqualToArray:otherMessage.linkersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  [self.linkersArray enumerateObjectsUsingBlock:^(User *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LinkBroadcastBuilder()
@property (strong) LinkBroadcast* resultLinkBroadcast;
@end

@implementation LinkBroadcastBuilder
@synthesize resultLinkBroadcast;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkBroadcast = [[LinkBroadcast alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkBroadcast;
}
- (LinkBroadcastBuilder*) clear {
  self.resultLinkBroadcast = [[LinkBroadcast alloc] init];
  return self;
}
- (LinkBroadcastBuilder*) clone {
  return [LinkBroadcast builderWithPrototype:resultLinkBroadcast];
}
- (LinkBroadcast*) defaultInstance {
  return [LinkBroadcast defaultInstance];
}
- (LinkBroadcast*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkBroadcast*) buildPartial {
  LinkBroadcast* returnMe = resultLinkBroadcast;
  self.resultLinkBroadcast = nil;
  return returnMe;
}
- (LinkBroadcastBuilder*) mergeFrom:(LinkBroadcast*) other {
  if (other == [LinkBroadcast defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.linkersArray.count > 0) {
    if (resultLinkBroadcast.linkersArray == nil) {
      resultLinkBroadcast.linkersArray = [[NSMutableArray alloc] initWithArray:other.linkersArray];
    } else {
      [resultLinkBroadcast.linkersArray addObjectsFromArray:other.linkersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkBroadcastBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkBroadcastBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLinkers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultLinkBroadcast.hasOwid;
}
- (SInt32) owid {
  return resultLinkBroadcast.owid;
}
- (LinkBroadcastBuilder*) setOwid:(SInt32) value {
  resultLinkBroadcast.hasOwid = YES;
  resultLinkBroadcast.owid = value;
  return self;
}
- (LinkBroadcastBuilder*) clearOwid {
  resultLinkBroadcast.hasOwid = NO;
  resultLinkBroadcast.owid = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultLinkBroadcast.hasStatus;
}
- (SInt32) status {
  return resultLinkBroadcast.status;
}
- (LinkBroadcastBuilder*) setStatus:(SInt32) value {
  resultLinkBroadcast.hasStatus = YES;
  resultLinkBroadcast.status = value;
  return self;
}
- (LinkBroadcastBuilder*) clearStatus {
  resultLinkBroadcast.hasStatus = NO;
  resultLinkBroadcast.status = 0;
  return self;
}
- (NSMutableArray<User*> *)linkers {
  return resultLinkBroadcast.linkersArray;
}
- (User*)linkersAtIndex:(NSUInteger)index {
  return [resultLinkBroadcast linkersAtIndex:index];
}
- (LinkBroadcastBuilder *)addLinkers:(User*)value {
  if (resultLinkBroadcast.linkersArray == nil) {
    resultLinkBroadcast.linkersArray = [[NSMutableArray alloc]init];
  }
  [resultLinkBroadcast.linkersArray addObject:value];
  return self;
}
- (LinkBroadcastBuilder *)setLinkersArray:(NSArray<User*> *)array {
  resultLinkBroadcast.linkersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (LinkBroadcastBuilder *)clearLinkers {
  resultLinkBroadcast.linkersArray = nil;
  return self;
}
@end

@interface BannerNotify ()
@property SInt32 owid;
@property (strong) User* user;
@property (strong) User* anchor;
@property SInt32 templateId;
@property SInt32 gid;
@property SInt32 attrId;
@property SInt32 giftCount;
@end

@implementation BannerNotify

- (BOOL) hasOwid {
  return !!hasOwid_;
}
- (void) setHasOwid:(BOOL) _value_ {
  hasOwid_ = !!_value_;
}
@synthesize owid;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasAnchor {
  return !!hasAnchor_;
}
- (void) setHasAnchor:(BOOL) _value_ {
  hasAnchor_ = !!_value_;
}
@synthesize anchor;
- (BOOL) hasTemplateId {
  return !!hasTemplateId_;
}
- (void) setHasTemplateId:(BOOL) _value_ {
  hasTemplateId_ = !!_value_;
}
@synthesize templateId;
- (BOOL) hasGid {
  return !!hasGid_;
}
- (void) setHasGid:(BOOL) _value_ {
  hasGid_ = !!_value_;
}
@synthesize gid;
- (BOOL) hasAttrId {
  return !!hasAttrId_;
}
- (void) setHasAttrId:(BOOL) _value_ {
  hasAttrId_ = !!_value_;
}
@synthesize attrId;
- (BOOL) hasGiftCount {
  return !!hasGiftCount_;
}
- (void) setHasGiftCount:(BOOL) _value_ {
  hasGiftCount_ = !!_value_;
}
@synthesize giftCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.owid = 0;
    self.user = [User defaultInstance];
    self.anchor = [User defaultInstance];
    self.templateId = 0;
    self.gid = 0;
    self.attrId = 0;
    self.giftCount = 0;
  }
  return self;
}
static BannerNotify* defaultBannerNotifyInstance = nil;
+ (void) initialize {
  if (self == [BannerNotify class]) {
    defaultBannerNotifyInstance = [[BannerNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBannerNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultBannerNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOwid) {
    return NO;
  }
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasAnchor) {
    return NO;
  }
  if (!self.hasTemplateId) {
    return NO;
  }
  if (!self.hasGid) {
    return NO;
  }
  if (!self.hasAttrId) {
    return NO;
  }
  if (!self.hasGiftCount) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  if (!self.anchor.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOwid) {
    [output writeInt32:1 value:self.owid];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasAnchor) {
    [output writeMessage:3 value:self.anchor];
  }
  if (self.hasTemplateId) {
    [output writeInt32:4 value:self.templateId];
  }
  if (self.hasGid) {
    [output writeInt32:5 value:self.gid];
  }
  if (self.hasAttrId) {
    [output writeInt32:6 value:self.attrId];
  }
  if (self.hasGiftCount) {
    [output writeInt32:7 value:self.giftCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOwid) {
    size_ += computeInt32Size(1, self.owid);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasAnchor) {
    size_ += computeMessageSize(3, self.anchor);
  }
  if (self.hasTemplateId) {
    size_ += computeInt32Size(4, self.templateId);
  }
  if (self.hasGid) {
    size_ += computeInt32Size(5, self.gid);
  }
  if (self.hasAttrId) {
    size_ += computeInt32Size(6, self.attrId);
  }
  if (self.hasGiftCount) {
    size_ += computeInt32Size(7, self.giftCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BannerNotify*) parseFromData:(NSData*) data {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromData:data] build];
}
+ (BannerNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BannerNotify*) parseFromInputStream:(NSInputStream*) input {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromInputStream:input] build];
}
+ (BannerNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BannerNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromCodedInputStream:input] build];
}
+ (BannerNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BannerNotify*)[[[BannerNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BannerNotifyBuilder*) builder {
  return [[BannerNotifyBuilder alloc] init];
}
+ (BannerNotifyBuilder*) builderWithPrototype:(BannerNotify*) prototype {
  return [[BannerNotify builder] mergeFrom:prototype];
}
- (BannerNotifyBuilder*) builder {
  return [BannerNotify builder];
}
- (BannerNotifyBuilder*) toBuilder {
  return [BannerNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOwid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"owid", [NSNumber numberWithInteger:self.owid]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAnchor) {
    [output appendFormat:@"%@%@ {\n", indent, @"anchor"];
    [self.anchor writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTemplateId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"templateId", [NSNumber numberWithInteger:self.templateId]];
  }
  if (self.hasGid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gid", [NSNumber numberWithInteger:self.gid]];
  }
  if (self.hasAttrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attrId", [NSNumber numberWithInteger:self.attrId]];
  }
  if (self.hasGiftCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"giftCount", [NSNumber numberWithInteger:self.giftCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOwid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.owid] forKey: @"owid"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasAnchor) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.anchor storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"anchor"];
  }
  if (self.hasTemplateId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.templateId] forKey: @"templateId"];
  }
  if (self.hasGid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gid] forKey: @"gid"];
  }
  if (self.hasAttrId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.attrId] forKey: @"attrId"];
  }
  if (self.hasGiftCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.giftCount] forKey: @"giftCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BannerNotify class]]) {
    return NO;
  }
  BannerNotify *otherMessage = other;
  return
      self.hasOwid == otherMessage.hasOwid &&
      (!self.hasOwid || self.owid == otherMessage.owid) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasAnchor == otherMessage.hasAnchor &&
      (!self.hasAnchor || [self.anchor isEqual:otherMessage.anchor]) &&
      self.hasTemplateId == otherMessage.hasTemplateId &&
      (!self.hasTemplateId || self.templateId == otherMessage.templateId) &&
      self.hasGid == otherMessage.hasGid &&
      (!self.hasGid || self.gid == otherMessage.gid) &&
      self.hasAttrId == otherMessage.hasAttrId &&
      (!self.hasAttrId || self.attrId == otherMessage.attrId) &&
      self.hasGiftCount == otherMessage.hasGiftCount &&
      (!self.hasGiftCount || self.giftCount == otherMessage.giftCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOwid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.owid] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasAnchor) {
    hashCode = hashCode * 31 + [self.anchor hash];
  }
  if (self.hasTemplateId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.templateId] hash];
  }
  if (self.hasGid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gid] hash];
  }
  if (self.hasAttrId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.attrId] hash];
  }
  if (self.hasGiftCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.giftCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BannerNotifyBuilder()
@property (strong) BannerNotify* resultBannerNotify;
@end

@implementation BannerNotifyBuilder
@synthesize resultBannerNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBannerNotify = [[BannerNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBannerNotify;
}
- (BannerNotifyBuilder*) clear {
  self.resultBannerNotify = [[BannerNotify alloc] init];
  return self;
}
- (BannerNotifyBuilder*) clone {
  return [BannerNotify builderWithPrototype:resultBannerNotify];
}
- (BannerNotify*) defaultInstance {
  return [BannerNotify defaultInstance];
}
- (BannerNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BannerNotify*) buildPartial {
  BannerNotify* returnMe = resultBannerNotify;
  self.resultBannerNotify = nil;
  return returnMe;
}
- (BannerNotifyBuilder*) mergeFrom:(BannerNotify*) other {
  if (other == [BannerNotify defaultInstance]) {
    return self;
  }
  if (other.hasOwid) {
    [self setOwid:other.owid];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasAnchor) {
    [self mergeAnchor:other.anchor];
  }
  if (other.hasTemplateId) {
    [self setTemplateId:other.templateId];
  }
  if (other.hasGid) {
    [self setGid:other.gid];
  }
  if (other.hasAttrId) {
    [self setAttrId:other.attrId];
  }
  if (other.hasGiftCount) {
    [self setGiftCount:other.giftCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BannerNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BannerNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOwid:[input readInt32]];
        break;
      }
      case 18: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasAnchor) {
          [subBuilder mergeFrom:self.anchor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAnchor:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setTemplateId:[input readInt32]];
        break;
      }
      case 40: {
        [self setGid:[input readInt32]];
        break;
      }
      case 48: {
        [self setAttrId:[input readInt32]];
        break;
      }
      case 56: {
        [self setGiftCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOwid {
  return resultBannerNotify.hasOwid;
}
- (SInt32) owid {
  return resultBannerNotify.owid;
}
- (BannerNotifyBuilder*) setOwid:(SInt32) value {
  resultBannerNotify.hasOwid = YES;
  resultBannerNotify.owid = value;
  return self;
}
- (BannerNotifyBuilder*) clearOwid {
  resultBannerNotify.hasOwid = NO;
  resultBannerNotify.owid = 0;
  return self;
}
- (BOOL) hasUser {
  return resultBannerNotify.hasUser;
}
- (User*) user {
  return resultBannerNotify.user;
}
- (BannerNotifyBuilder*) setUser:(User*) value {
  resultBannerNotify.hasUser = YES;
  resultBannerNotify.user = value;
  return self;
}
- (BannerNotifyBuilder*) setUserBuilder:(UserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (BannerNotifyBuilder*) mergeUser:(User*) value {
  if (resultBannerNotify.hasUser &&
      resultBannerNotify.user != [User defaultInstance]) {
    resultBannerNotify.user =
      [[[User builderWithPrototype:resultBannerNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultBannerNotify.user = value;
  }
  resultBannerNotify.hasUser = YES;
  return self;
}
- (BannerNotifyBuilder*) clearUser {
  resultBannerNotify.hasUser = NO;
  resultBannerNotify.user = [User defaultInstance];
  return self;
}
- (BOOL) hasAnchor {
  return resultBannerNotify.hasAnchor;
}
- (User*) anchor {
  return resultBannerNotify.anchor;
}
- (BannerNotifyBuilder*) setAnchor:(User*) value {
  resultBannerNotify.hasAnchor = YES;
  resultBannerNotify.anchor = value;
  return self;
}
- (BannerNotifyBuilder*) setAnchorBuilder:(UserBuilder*) builderForValue {
  return [self setAnchor:[builderForValue build]];
}
- (BannerNotifyBuilder*) mergeAnchor:(User*) value {
  if (resultBannerNotify.hasAnchor &&
      resultBannerNotify.anchor != [User defaultInstance]) {
    resultBannerNotify.anchor =
      [[[User builderWithPrototype:resultBannerNotify.anchor] mergeFrom:value] buildPartial];
  } else {
    resultBannerNotify.anchor = value;
  }
  resultBannerNotify.hasAnchor = YES;
  return self;
}
- (BannerNotifyBuilder*) clearAnchor {
  resultBannerNotify.hasAnchor = NO;
  resultBannerNotify.anchor = [User defaultInstance];
  return self;
}
- (BOOL) hasTemplateId {
  return resultBannerNotify.hasTemplateId;
}
- (SInt32) templateId {
  return resultBannerNotify.templateId;
}
- (BannerNotifyBuilder*) setTemplateId:(SInt32) value {
  resultBannerNotify.hasTemplateId = YES;
  resultBannerNotify.templateId = value;
  return self;
}
- (BannerNotifyBuilder*) clearTemplateId {
  resultBannerNotify.hasTemplateId = NO;
  resultBannerNotify.templateId = 0;
  return self;
}
- (BOOL) hasGid {
  return resultBannerNotify.hasGid;
}
- (SInt32) gid {
  return resultBannerNotify.gid;
}
- (BannerNotifyBuilder*) setGid:(SInt32) value {
  resultBannerNotify.hasGid = YES;
  resultBannerNotify.gid = value;
  return self;
}
- (BannerNotifyBuilder*) clearGid {
  resultBannerNotify.hasGid = NO;
  resultBannerNotify.gid = 0;
  return self;
}
- (BOOL) hasAttrId {
  return resultBannerNotify.hasAttrId;
}
- (SInt32) attrId {
  return resultBannerNotify.attrId;
}
- (BannerNotifyBuilder*) setAttrId:(SInt32) value {
  resultBannerNotify.hasAttrId = YES;
  resultBannerNotify.attrId = value;
  return self;
}
- (BannerNotifyBuilder*) clearAttrId {
  resultBannerNotify.hasAttrId = NO;
  resultBannerNotify.attrId = 0;
  return self;
}
- (BOOL) hasGiftCount {
  return resultBannerNotify.hasGiftCount;
}
- (SInt32) giftCount {
  return resultBannerNotify.giftCount;
}
- (BannerNotifyBuilder*) setGiftCount:(SInt32) value {
  resultBannerNotify.hasGiftCount = YES;
  resultBannerNotify.giftCount = value;
  return self;
}
- (BannerNotifyBuilder*) clearGiftCount {
  resultBannerNotify.hasGiftCount = NO;
  resultBannerNotify.giftCount = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
